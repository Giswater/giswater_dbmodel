/*
This file is part of Giswater 3
The program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
This version of Giswater is provided by Giswater Association
*/

DELETE FROM config_form_fields WHERE formname='visit_arc_leak' AND formtype='form_visit' AND columnname='visit_id' AND tabname='tab_data';
DELETE FROM config_form_fields WHERE formname='visit_node_insp' AND formtype='form_visit' AND columnname='visit_id' AND tabname='tab_data';
DELETE FROM config_form_fields WHERE formname='incident_node' AND formtype='form_visit' AND columnname='visit_id' AND tabname='tab_data';

INSERT INTO config_form_fields (formname, formtype, tabname, columnname, layoutname, layoutorder, "datatype", widgettype, "label", tooltip, placeholder, ismandatory, isparent, iseditable, isautoupdate, isfilter, dv_querytext, dv_orderby_id, dv_isnullvalue, dv_parent_id, dv_querytext_filterc, stylesheet, widgetcontrols, widgetfunction, linkedobject, hidden, web_layoutorder)
    VALUES('generic', 'form_visit', 'tab_data', 'visit_id', 'lyt_data_1', NULL, 'double', 'text', 'Visit id:', NULL, NULL, false, false, false, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, false, 1);

UPDATE config_form_fields SET web_layoutorder=2 WHERE formname='visit_connec_leak' AND formtype='form_visit' AND columnname='class_id' AND tabname='tab_data';
UPDATE config_form_fields SET web_layoutorder=2 WHERE formname='incident_node' AND formtype='form_visit' AND columnname='class_id' AND tabname='tab_data';
UPDATE config_form_fields SET web_layoutorder=2 WHERE formname='visit_arc_leak' AND formtype='form_visit' AND columnname='class_id' AND tabname='tab_data';
UPDATE config_form_fields SET web_layoutorder=2 WHERE formname='visit_node_insp' AND formtype='form_visit' AND columnname='class_id' AND tabname='tab_data';


INSERT INTO config_typevalue (typevalue, id, idval, camelstyle, addparam) VALUES ('layout_name_typevalue', 'lyt_main_1', 'lyt_main_1', 'layoutMain1', '{"lytOrientation":"vertical"}');
INSERT INTO config_typevalue (typevalue, id, idval, camelstyle, addparam) VALUES ('layout_name_typevalue', 'lyt_main_2', 'lyt_main_2', 'layoutMain2', NULL);
INSERT INTO config_typevalue (typevalue, id, idval, camelstyle, addparam) VALUES ('layout_name_typevalue', 'lyt_main_3', 'lyt_main_3', 'layoutMain3', NULL);
INSERT INTO config_typevalue (typevalue, id, idval, camelstyle, addparam) VALUES ('formtype_typevalue', 'form_featuretype_change', 'form_featuretype_change', 'formFeaturetypeChange', NULL);

INSERT INTO config_form_fields (formname, formtype, tabname, columnname, layoutname, layoutorder, "datatype", widgettype, "label", tooltip, placeholder, ismandatory, isparent, iseditable, isautoupdate, isfilter, dv_querytext, dv_orderby_id, dv_isnullvalue, dv_parent_id, dv_querytext_filterc, stylesheet, widgetcontrols, widgetfunction, linkedobject, hidden, web_layoutorder) VALUES ('generic', 'form_featuretype_change', 'tab_none', 'btn_accept', 'lyt_buttons', 2, NULL, 'button', NULL, NULL, NULL, FALSE, FALSE, TRUE, FALSE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '{"text": "Accept"}'::json, '{"functionName": "btn_accept_featuretype_change", "module": "featuretype_change_button", "parameters": {}}'::json, NULL, FALSE, NULL);
INSERT INTO config_form_fields (formname, formtype, tabname, columnname, layoutname, layoutorder, "datatype", widgettype, "label", tooltip, placeholder, ismandatory, isparent, iseditable, isautoupdate, isfilter, dv_querytext, dv_orderby_id, dv_isnullvalue, dv_parent_id, dv_querytext_filterc, stylesheet, widgetcontrols, widgetfunction, linkedobject, hidden, web_layoutorder) VALUES ('generic', 'form_featuretype_change', 'tab_none', 'spacer', 'lyt_buttons', 1, NULL, 'hspacer', NULL, NULL, NULL, FALSE, FALSE, TRUE, FALSE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, FALSE, NULL);
INSERT INTO config_form_fields (formname, formtype, tabname, columnname, layoutname, layoutorder, "datatype", widgettype, "label", tooltip, placeholder, ismandatory, isparent, iseditable, isautoupdate, isfilter, dv_querytext, dv_orderby_id, dv_isnullvalue, dv_parent_id, dv_querytext_filterc, stylesheet, widgetcontrols, widgetfunction, linkedobject, hidden, web_layoutorder) VALUES ('generic', 'form_featuretype_change', 'tab_none', 'btn_cancel', 'lyt_buttons', 3, NULL, 'button', NULL, NULL, NULL, FALSE, FALSE, TRUE, FALSE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '{"text": "Cancel"}'::json, '{"functionName": "btn_cancel_featuretype_change", "module": "featuretype_change_button", "parameters": {}}'::json, NULL, FALSE, NULL);
INSERT INTO config_form_fields (formname, formtype, tabname, columnname, layoutname, layoutorder, "datatype", widgettype, "label", tooltip, placeholder, ismandatory, isparent, iseditable, isautoupdate, isfilter, dv_querytext, dv_orderby_id, dv_isnullvalue, dv_parent_id, dv_querytext_filterc, stylesheet, widgetcontrols, widgetfunction, linkedobject, hidden, web_layoutorder) VALUES ('generic', 'form_featuretype_change', 'tab_none', 'btn_catalog', 'lyt_main_2', 3, NULL, 'button', NULL, NULL, NULL, FALSE, FALSE, TRUE, FALSE, NULL, NULL, NULL, NULL, NULL, NULL, '{"icon": "195", "size": "20x20"}'::json, NULL, '{"functionName": "btn_catalog_featuretype_change", "module": "featuretype_change_button", "parameters": {}}'::json, NULL, FALSE, NULL);
INSERT INTO config_form_fields (formname, formtype, tabname, columnname, layoutname, layoutorder, "datatype", widgettype, "label", tooltip, placeholder, ismandatory, isparent, iseditable, isautoupdate, isfilter, dv_querytext, dv_orderby_id, dv_isnullvalue, dv_parent_id, dv_querytext_filterc, stylesheet, widgetcontrols, widgetfunction, linkedobject, hidden, web_layoutorder) VALUES ('generic', 'form_featuretype_change', 'tab_none', 'feature_type', 'lyt_main_1', 1, 'string', 'text', 'Current feature type', 'Current feature type', NULL, FALSE, FALSE, FALSE, FALSE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, FALSE, NULL);
INSERT INTO config_form_fields (formname, formtype, tabname, columnname, layoutname, layoutorder, "datatype", widgettype, "label", tooltip, placeholder, ismandatory, isparent, iseditable, isautoupdate, isfilter, dv_querytext, dv_orderby_id, dv_isnullvalue, dv_parent_id, dv_querytext_filterc, stylesheet, widgetcontrols, widgetfunction, linkedobject, hidden, web_layoutorder) VALUES ('generic', 'form_featuretype_change', 'tab_none', 'feature_type_new', 'lyt_main_1', 1, 'string', 'combo', 'New feature type', 'New feature type', NULL, FALSE, FALSE, TRUE, FALSE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '{"functionName": "cmb_new_featuretype_selection_changed", "module": "featuretype_change_button", "parameters": {}}'::json, NULL, FALSE, NULL);
INSERT INTO config_form_fields (formname, formtype, tabname, columnname, layoutname, layoutorder, "datatype", widgettype, "label", tooltip, placeholder, ismandatory, isparent, iseditable, isautoupdate, isfilter, dv_querytext, dv_orderby_id, dv_isnullvalue, dv_parent_id, dv_querytext_filterc, stylesheet, widgetcontrols, widgetfunction, linkedobject, hidden, web_layoutorder) VALUES ('generic', 'form_featuretype_change', 'tab_none', 'featurecat_id', 'lyt_main_2', 1, 'string', 'combo', 'Catalog id', 'Catalog id', NULL, FALSE, FALSE, TRUE, FALSE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, FALSE, NULL);
INSERT INTO config_form_fields (formname, formtype, tabname, columnname, layoutname, layoutorder, "datatype", widgettype, "label", tooltip, placeholder, ismandatory, isparent, iseditable, isautoupdate, isfilter, dv_querytext, dv_orderby_id, dv_isnullvalue, dv_parent_id, dv_querytext_filterc, stylesheet, widgetcontrols, widgetfunction, linkedobject, hidden, web_layoutorder) VALUES ('generic', 'form_featuretype_change', 'tab_none', 'fluid_type', 'lyt_main_3', 1, 'string', 'combo', 'Fluid', 'Fluid', NULL, FALSE, FALSE, TRUE, FALSE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '{"labelPosition": "top"}'::json, NULL, NULL, FALSE, NULL);
INSERT INTO config_form_fields (formname, formtype, tabname, columnname, layoutname, layoutorder, "datatype", widgettype, "label", tooltip, placeholder, ismandatory, isparent, iseditable, isautoupdate, isfilter, dv_querytext, dv_orderby_id, dv_isnullvalue, dv_parent_id, dv_querytext_filterc, stylesheet, widgetcontrols, widgetfunction, linkedobject, hidden, web_layoutorder) VALUES ('generic', 'form_featuretype_change', 'tab_none', 'location_type', 'lyt_main_3', 2, 'string', 'combo', 'Location', 'Location', NULL, FALSE, FALSE, TRUE, FALSE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '{"labelPosition": "top"}'::json, NULL, NULL, FALSE, NULL);
INSERT INTO config_form_fields (formname, formtype, tabname, columnname, layoutname, layoutorder, "datatype", widgettype, "label", tooltip, placeholder, ismandatory, isparent, iseditable, isautoupdate, isfilter, dv_querytext, dv_orderby_id, dv_isnullvalue, dv_parent_id, dv_querytext_filterc, stylesheet, widgetcontrols, widgetfunction, linkedobject, hidden, web_layoutorder) VALUES ('generic', 'form_featuretype_change', 'tab_none', 'category_type', 'lyt_main_3', 3, 'string', 'combo', 'Category', 'Category', NULL, FALSE, FALSE, TRUE, FALSE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '{"labelPosition": "top"}'::json, NULL, NULL, FALSE, NULL);
INSERT INTO config_form_fields (formname, formtype, tabname, columnname, layoutname, layoutorder, "datatype", widgettype, "label", tooltip, placeholder, ismandatory, isparent, iseditable, isautoupdate, isfilter, dv_querytext, dv_orderby_id, dv_isnullvalue, dv_parent_id, dv_querytext_filterc, stylesheet, widgetcontrols, widgetfunction, linkedobject, hidden, web_layoutorder) VALUES ('generic', 'form_featuretype_change', 'tab_none', 'function_type', 'lyt_main_3', 4, 'string', 'combo', 'Function', 'Function', NULL, FALSE, FALSE, TRUE, FALSE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '{"labelPosition": "top"}'::json, NULL, NULL, FALSE, NULL);

INSERT INTO sys_function (id, function_name, project_type, function_type, input_params, return_type, descript, sys_role, sample_query, "source") VALUES (3324, 'gw_fct_getfeaturereplace', 'utils', 'function', 'json', 'json', 'Function to get feature type change dialog', 'role_edit', NULL, 'core');

-- 17/09/2024
INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(580, 'Features state=2 are involved in psector', 'ud', NULL, 'core', true, 'Check plan-config', NULL, 3, 'planified arcs without psector. planified nodes without psector. planified connecs without psector. planified gullys without psector. features with state=2 without psector assigned. Please, check your data before continue', NULL, 'SELECT a.feature_id, a.feature , a.catalog, a.the_geom, count(*) FROM (
SELECT node_id as feature_id, ''NODE'' as feature, nodecat_id as catalog, 
the_geom FROM v_edit_node WHERE state=2 AND node_id NOT IN 
(select node_id FROM plan_psector_x_node) UNION  
SELECT arc_id as feature_id, ''ARC'' as feature, arccat_id as catalog, 
the_geom  FROM v_edit_arc WHERE state=2 AND arc_id NOT IN 
(select arc_id FROM plan_psector_x_arc) UNION  
SELECT connec_id as feature_id, ''CONNEC'' as feature, connecat_id  as catalog, the_geom  FROM v_edit_connec WHERE state=2 AND connec_id NOT IN 
(select connec_id FROM plan_psector_x_connec) UNION 
SELECT gully_id as feature_id, ''GULLY'' as feature , gratecat_id as catalog, the_geom 
FROM v_edit_gully WHERE state=2 AND gully_id NOT IN (select gully_id FROM plan_psector_x_gully)) a
GROUP BY a.feature_id, a.feature ,a.catalog, a.the_geom', 'There are no features with state=2 without psector.', '{gw_fct_plan_check_data}');
INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(582, 'State not according with state_type', 'ud', NULL, 'core', true, 'Check om-data', NULL, 3, 'features with state without concordance with state_type. Please, check your data before continue features with state without concordance with state_type. Please, check your data before continue', NULL, 'SELECT arc_id as id, a.state, state_type FROM v_prefix_arc a 
JOIN value_state_type b ON id=state_type 
WHERE a.state <> b.state UNION 
SELECT node_id as id, a.state, state_type FROM v_prefix_node a 
JOIN value_state_type b ON id=state_type WHERE a.state <> b.state UNION 
SELECT connec_id as id, a.state, state_type FROM v_prefix_connec a 
JOIN value_state_type b ON id=state_type WHERE a.state <> b.state UNION 
SELECT gully_id as id, a.state, state_type FROM v_prefix_gully a 
JOIN value_state_type b ON id=state_type WHERE a.state <> b.state UNION 
SELECT element_id as id, a.state, state_type FROM v_prefix_element a 
JOIN value_state_type b ON id=state_type WHERE a.state <> b.state', 'No features without concordance against state and state_type.   No features without concordance against state and state_type.', '{gw_fct_om_check_data}');
INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(584, 'Features with code null', 'ud', NULL, 'core', true, 'Check om-data', NULL, 3, 'features with code with NULL values. Please, check your data before continue with code with NULL values. Please, check your data before continue', NULL, 'SELECT arc_id, arccat_id, the_geom FROM v_prefix_arc WHERE code IS NULL UNION 
SELECT node_id, nodecat_id, the_geom FROM v_prefix_node WHERE code IS NULL UNION 
SELECT connec_id, connecat_id, the_geom FROM v_prefix_connec WHERE code IS NULL UNION 
SELECT gully_id, gratecat_id, the_geom FROM v_prefix_gully WHERE code IS NULL UNION 
SELECT element_id, elementcat_id, the_geom FROM v_prefix_element WHERE code IS NULL', 'No features (arc, node, connec, gully, element) with NULL values on code found. No features (arc, node, connec, element) with NULL values on code found.', '{gw_fct_om_check_data}');
INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(586, 'Features state=1 and end date', 'ud', NULL, 'core', true, 'Check om-data', NULL, 2, 'features on service with value of end date.', NULL, 'SELECT arc_id as feature_id from v_prefix_arc where state = 1 and enddate is not null UNION 
SELECT node_id from v_prefix_node where state = 1 and enddate is not null UNION 
SELECT connec_id from v_prefix_connec where state = 1 and enddate is not null UNION 
SELECT gully_id from v_prefix_gully where state = 1 and enddate is not null', 'No features on service have value of end date', '{gw_fct_om_check_data}');
INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(588, 'Features state=0 without end date', 'ud', NULL, 'core', true, 'Check om-data', NULL, 2, 'features with state 0 without value of end date.', NULL, 'SELECT arc_id as feature_id from v_prefix_arc where state = 0 and enddate is null UNION 
SELECT node_id from v_prefix_node where state = 0 and enddate is null UNION 
SELECT connec_id from v_prefix_connec where state = 0 and enddate is null UNION 
SELECT gully_id from v_prefix_gully where state = 0 and enddate is null', 'No features with state 0 are missing the end date', '{gw_fct_om_check_data}');
INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(590, 'Features state=1 and end date before start date', 'ud', NULL, 'core', true, 'Check om-data', NULL, 2, 'features with end date earlier than built date.', NULL, 'SELECT arc_id as feature_id from v_prefix_arc where enddate < builtdate and state = 1 UNION 
SELECT node_id from v_prefix_node where enddate < builtdate and state = 1 UNION 
SELECT connec_id from v_prefix_connec where enddate < builtdate and state = 1 UNION 
SELECT gully_id from v_prefix_gully where enddate < builtdate and state = 1', 'No features with end date earlier than built date', '{gw_fct_om_check_data}');
INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(592, 'Duplicated ID between arc, node, connec, gully', 'ud', NULL, 'core', true, 'Check om-data', NULL, 3, 'features with duplicated ID value between arc, node, connec, gully features with duplicated ID values between arc, node, connec, gully', NULL, 'SELECT node_id AS feature_id FROM v_prefix_node n JOIN v_prefix_arc a ON a.arc_id=n.node_id UNION 
SELECT node_id FROM v_prefix_node n JOIN v_prefix_connec c ON c.connec_id=n.node_id UNION 
SELECT node_id FROM v_prefix_node n JOIN v_prefix_gully g ON g.gully_id=n.node_id UNION 
SELECT connec_id FROM v_prefix_connec c JOIN v_prefix_gully g ON g.gully_id=c.connec_id UNION 
SELECT a.arc_id FROM v_prefix_arc a JOIN v_prefix_connec c ON c.connec_id=a.arc_id UNION 
SELECT a.arc_id FROM v_prefix_arc a JOIN v_prefix_gully g ON g.gully_id=a.arc_id', 'All features have a diferent ID to be correctly identified', '{gw_fct_om_check_data}');
INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(594, 'Check if defined nodes and arcs exist in a database', 'ws', NULL, 'core', true, 'Check graph-data', '{"isLooping":"true"}'::json, 2, 'nodes that are configured as nodeParent for v_prefix_ but is not operative on node table. Node_id - ,   string_agg(concat(v_prefix_:,zone_id,-,a.node_id::text),, )', NULL, 'SELECT b.node_id, b.v_table_id as zone_id FROM (
SELECT v_table_id, (graphconfig->''use''->0->>''nodeParent'')::text as node_id FROM v_table)b 
WHERE node_id::text not in (select node_id FROM node WHERE state=1)', 'All nodes defined as nodeParent on v_prefix_ exists on DB.', '{gw_fct_graphanalytics_check_data}');
INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(596, 'Node orphan with isarcdivide=TRUE (OM)', 'ud', NULL, 'core', true, 'Check om-topology', NULL, 2, 'orphan nodes with isarcdivide=TRUE.', NULL, 'SELECT * FROM v_prefix_node a JOIN cat_feature_node ON id = a.node_type WHERE a.state>0 AND isarcdivide = true 
AND (SELECT COUNT(*) FROM arc WHERE node_1 = a.node_id OR node_2 = a.node_id and arc.state>0) = 0', 'There are no orphan nodes with isarcdivide=TRUE', '{gw_fct_om_check_data}');
INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(598, 'Node orphan with isarcdivide=FALSE (OM)', 'ud', NULL, 'core', true, 'Check om-topology', NULL, 2, 'orphan nodes with isarcdivide=FALSE.', NULL, 'SELECT  * FROM node a JOIN cat_feature_node ON id = a.node_type WHERE a.state>0 AND isarcdivide=false', 'There are no orphan nodes with isarcdivide=FALSE', '{gw_fct_om_check_data}');


INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(524, 'Null values on valve_type of virtualvalve', 'ws', NULL, 'core', true, 'Check epa-data', NULL, 1, 'virtualvalves with null values on valv_type column.', NULL, 'SELECT * FROM v_edit_inp_virtualvalve WHERE valv_type IS NULL', 'Virtualvalve valv_type checked. No mandatory values missed.', '[gw_fct_pg2epa_check_data]');

INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(525, 'Null values on valve status of virtualvalves', 'ws', NULL, 'core', true, 'Check epa-data', NULL, 3, 'virtualvalves with null values on mandatory column status.', NULL, 'SELECT * FROM v_edit_inp_virtualvalve WHERE status IS NULL AND state > 0', 'Virtualvalve status checked. No mandatory values missed.', '[gw_fct_pg2epa_check_data]');

INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(526, 'Null values on virtualvalve pressure', 'ws', NULL, 'core', true, 'Check epa-data', NULL, 3, 'PBV-PRV-PSV virtualvalves with null values on the mandatory column for Pressure valves.', NULL, 'SELECT * FROM v_edit_inp_virtualvalve WHERE ((valv_type=''PBV'' OR valv_type=''PRV'' OR valv_type=''PSV'') AND (pressure IS NULL))', 'PBC-PRV-PSV virtualvalves checked. No mandatory values missed.', '[gw_fct_pg2epa_check_data]');

INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(527, 'Null values on GPV virtualvalve config', 'ws', NULL, 'core', true, 'Check epa-data', NULL, 3, 'GPV virtualvalves with null values on mandatory column for General purpose valves.', NULL, 'SELECT * FROM v_edit_inp_virtualvalve WHERE ((valv_type=''GPV'') AND (curve_id IS NULL))', 'GPV virtualvalves checked. No mandatory values missed.', '[gw_fct_pg2epa_check_data]');

INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(528, 'Null values on TCV virtualvalve config', 'ws', NULL, 'core', true, 'Check epa-data', NULL, 3, 'TCV virtualvalves with null values on mandatory column for Losses Valves.', NULL, 'SELECT * FROM v_edit_inp_virtualvalve WHERE valv_type=''TCV'' AND coef_loss IS NULL', 'TCV virtualvalves checked. No mandatory values missed.', '[gw_fct_pg2epa_check_data]');

INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(529, 'Null values on FCV virtualvalve config', 'ws', NULL, 'core', true, 'Check epa-data', NULL, 3, 'FCV virtualvalves with null values on mandatory column for Flow Control Valves.', NULL, 'SELECT * FROM v_edit_inp_virtualvalve WHERE ((valv_type=''FCV'') AND (flow IS NULL))', 'FCV virtualvalves checked. No mandatory values missed.', '[gw_fct_pg2epa_check_data]');

INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(530, 'Null values on virtualpumps type', 'ws', NULL, 'core', true, 'Check epa-data', NULL, 3, 'virtualpumps with null values on pump_type column. virtualpump''''s with null values on pump_type column.', NULL, 'SELECT * FROM v_edit_inp_virtualpump WHERE pump_type IS NULL', 'Virtualpumps checked. No mandatory values for pump_type missed. Virtualpumps checked. No mandatory values for pump_type missed.', '[gw_fct_plan_check_data, gw_fct_pg2epa_check_data]');

INSERT INTO sys_fprocess (fid, fprocess_name, project_type, parameters, "source", isaudit, fprocess_type, addparam, except_level, except_msg, except_msg_feature, query_text, info_msg, function_name) VALUES(531, 'Null values on virtualpump curve_id ', 'ws', NULL, 'core', true, 'Check epa-data', NULL, 3, 'virtualpumps with null values at least on mandatory column curve_id. virtualpumps with null values at least on mandatory column curve_id.', NULL, 'SELECT * FROM v_edit_inp_virtualpump WHERE curve_id IS NULL', 'Virtualpumps checked. No mandatory values for curve_id missed. Virtualpumps checked. No mandatory values for curve_id missed.', '[gw_fct_plan_check_data, gw_fct_pg2epa_check_data]');

UPDATE sys_fprocess SET fprocess_name='Arc without start-end nodes', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-topology', addparam=NULL, except_level=3, except_msg='arcs with state=1 and without node_1 or node_2.', except_msg_feature=NULL, query_text='SELECT arc_id,arccat_id,the_geom, expl_id FROM v_prefix_arc WHERE state = 1 AND node_1 IS NULL UNION 
SELECT arc_id, arccat_id, the_geom, expl_id FROM v_prefix_arc WHERE state = 1 AND node_2 IS NULL', info_msg='No arc''''s with state=1 and without node_1 or node_2 nodes found.', function_name='[gw_fct_om_check_data]' WHERE fid=103;
UPDATE sys_fprocess SET fprocess_name='Node duplicated', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-topology', addparam=NULL, except_level=3, except_msg='nodes duplicated with state 1.', except_msg_feature=NULL, query_text='SELECT * FROM 
(SELECT DISTINCT t1.node_id AS node_1, t1.nodecat_id AS nodecat_1, t1.state as state1, 
t2.node_id AS node_2, t2.nodecat_id AS nodecat_2, t2.state as state2, t1.expl_id, 106, t1.the_geom 
FROM v_prefix_node AS t1 JOIN node AS t2 ON ST_Dwithin(t1.the_geom, t2.the_geom, 0.01) 
WHERE t1.node_id != t2.node_id ORDER BY t1.node_id ) a where a.state1 = 1 AND a.state2 = 1', info_msg='There are no nodes duplicated with state 1', function_name='[gw_fct_om_check_data]' WHERE fid=106;
UPDATE sys_fprocess SET fprocess_name='Node orphan (EPA)', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-topology', addparam=NULL, except_level=2, except_msg='nodes orphans ready-to-export (epa_type & state_type). If they are actually orphan, you could change the epa_type to fix it''', except_msg_feature=NULL, query_text='SELECT node_id, nodecat_id, the_geom, expl_id FROM 
(SELECT node_id FROM v_edit_node EXCEPT (SELECT node_1 as node_id FROM v_edit_arc UNION SELECT node_2 FROM v_edit_arc))a 
JOIN node USING (node_id)   JOIN selector_sector USING (sector_id) JOIN value_state_type v ON state_type = v.id 
WHERE epa_type != ''UNDEFINED'' and is_operative = true and cur_user = current_user and arc_id IS NULL', info_msg='No nodes orphan found.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=107;
UPDATE sys_fprocess SET fprocess_name='Check dint value for cat_node acting as [SHORTPIPE or VALVE or PUMP]', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-config', addparam=NULL, except_level=2, except_msg='registers on node''s catalog acting as [SHORTPIPE or VALVE] with dint not defined.''', except_msg_feature=NULL, query_text='SELECT * FROM cat_node WHERE dint IS NULL AND id IN 
(SELECT DISTINCT(nodecat_id) from v_edit_node WHERE epa_type IN (''SHORTPIPE'', ''VALVE''));', info_msg='Dint for node''''s catalog checked. No values missed for SHORTPIPES OR VALVES', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=142;
UPDATE sys_fprocess SET fprocess_name='Inlets with null mandatory values', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=2, except_msg='inlets with null values at least on mandatory columns for inlets (initlevel, minlevel, maxlevel, diameter, minvol).Take a look on temporal table to details.', except_msg_feature=NULL, query_text='SELECT * FROM temp_anl_node WHERE fid=153 AND cur_user=current_user', info_msg='Inlets checked. No mandatory values missed.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=153;
UPDATE sys_fprocess SET fprocess_name='Nodes without elevation', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=2, except_msg='nodes without elevation. Take a look on temporal table for details.', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_node JOIN selector_sector USING (sector_id) WHERE elevation IS NULL AND cur_user = current_user', info_msg='No nodes with null values on field elevation have been found.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=164;
UPDATE sys_fprocess SET fprocess_name='Nodes with elevation=0', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=2, except_msg='nodes with elevation=0.', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_node JOIN selector_sector USING (sector_id) WHERE elevation = 0 AND cur_user = current_user', info_msg='No nodes with ''''0'''' on field elevation have been found.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=165;
UPDATE sys_fprocess SET fprocess_name='Node2arc with more than two arcs', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-topology', addparam=NULL, except_level=2, except_msg='node2arcs with more than two arcs. It''''s impossible to continue''', except_msg_feature=NULL, query_text='SELECT * FROM (
SELECT node_id, nodecat_id, node.the_geom, node.expl_id FROM node  JOIN selector_sector USING (sector_id) 
JOIN v_edit_arc a1 ON node_id=a1.node_1  AND node.epa_type IN (''SHORTPIPE'', ''VALVE'', ''PUMP'') WHERE current_user=cur_user 
UNION ALL SELECT node_id, nodecat_id, node.the_geom, node.expl_id FROM node  JOIN selector_sector USING (sector_id) 
JOIN v_edit_arc a1 ON node_id=a1.node_2  AND node.epa_type IN (''SHORTPIPE'', ''VALVE'', ''PUMP'') WHERE current_user=cur_user)a 
GROUP by node_id, nodecat_id, the_geom, expl_id HAVING count(*) > 2;', info_msg='No results found looking for node2arcs with more than two arcs.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=166;
UPDATE sys_fprocess SET fprocess_name='Node2arc with less than two arcs', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-topology', addparam=NULL, except_level=2, except_msg='mandatory node2arcs with less than two arcs.''', except_msg_feature=NULL, query_text='SELECT *FROM (
SELECT node_id, nodecat_id, v_edit_node.the_geom, v_edit_node.expl_id FROM v_edit_node 
JOIN selector_sector USING (sector_id)   JOIN v_edit_arc a1 ON node_id=a1.node_1 WHERE cur_user = current_user 
AND v_edit_node.epa_type IN (''VALVE'', ''PUMP'') AND a1.sector_id IN (SELECT sector_id FROM selector_sector WHERE cur_user=current_user) UNION ALL
SELECT node_id, nodecat_id, v_edit_node.the_geom, v_edit_node.expl_id FROM v_edit_node  JOIN selector_sector USING (sector_id) 
JOIN v_edit_arc a1 ON node_id=a1.node_1 WHERE cur_user = current_user  AND v_edit_node.epa_type IN (''VALVE'', ''PUMP'') 
AND a1.sector_id IN (SELECT sector_id FROM selector_sector WHERE cur_user=current_user))a 
GROUP by node_id, nodecat_id, the_geom, expl_id HAVING count(*) < 2;', info_msg='No results found for mandatory node2arcs with less than two arcs.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=167;
UPDATE sys_fprocess SET fprocess_name='Check pipes with status CV', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=2, except_msg='CV pipes. Be carefull with the sense of pipe and check that node_1 and node_2 are on the right direction to prevent reverse flow.', except_msg_feature=NULL, query_text='SELECT * FROM temp_anl_arc WHERE fid = 169 AND cur_user=current_user', info_msg='No results found for CV pipes', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=169;
UPDATE sys_fprocess SET fprocess_name='Check concordance of to_arc valves', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=2, except_msg='valves with wrong to_arc value according to the current closest arcs.', except_msg_feature=NULL, query_text='SELECT * FROM temp_anl_node WHERE fid = 170 AND cur_user=current_user', info_msg='Valve to_arc wrong values checked. No inconsistencies have been detected according to the current closest arcs.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=170;
UPDATE sys_fprocess SET fprocess_name='Check concordance of to_arc pumps', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=3, except_msg='pumps with wrong to_arc value according to the current closest arcs.', except_msg_feature=NULL, query_text='SELECT * FROM temp_anl_node WHERE fid = 171 AND cur_user=current_user', info_msg='Pump to_arc wrong values checked. No inconsistencies have been detected according with the current closest arcs.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=171;
UPDATE sys_fprocess SET fprocess_name='Null values on state_type column', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='topologic features (arc, node) with state_type with NULL values. Please, check your data before continue', except_msg_feature=NULL, query_text='SELECT arc_id FROM v_prefix_arc WHERE state > 0 AND state_type IS NULL UNION SELECT node_id FROM v_prefix_node WHERE state > 0 AND state_type IS NULL', info_msg='No topologic features (arc, node) with state_type NULL values found.', function_name='[gw_fct_om_check_data]' WHERE fid=175;
UPDATE sys_fprocess SET fprocess_name='Null values on closed/broken values for valves', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check graph-data', addparam=NULL, except_level=3, except_msg='valves (state=1) with broken or closed with NULL values.', except_msg_feature=NULL, query_text='SELECT n.node_id, n.nodecat_id, n.the_geom, expl_id FROM man_valve JOIN v_prefix_node n USING (node_id) 
WHERE n.state = 1 AND (broken IS NULL OR closed IS NULL)', info_msg='There are not operative valves with null values on closed/broken fields.', function_name='[gw_fct_graphanalytics_check_data]' WHERE fid=176;
UPDATE sys_fprocess SET fprocess_name='inlet_x_exploitation with null/wrong values', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check graph-data', addparam=NULL, except_level=3, except_msg='rows with exploitation bad configured on the config_graph_mincut table. Please check your data before continue.', except_msg_feature=NULL, query_text='SELECT * FROM config_graph_mincut cgi INNER JOIN node n ON cgi.node_id = n.node_id  WHERE n.expl_id NOT IN 
(SELECT expl_id FROM exploitation WHERE active IS TRUE)', info_msg='It seems config_graph_mincut table is well configured. At least, table is filled with nodes from all exploitations. All tanks are defined in config_graph_mincut.', function_name='[gw_fct_graphanalytics_check_data, gw_fct_om_check_data]' WHERE fid=177;
UPDATE sys_fprocess SET fprocess_name='dma-nodeparent acording with graphdelimiter', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check graph-config', addparam=NULL, except_level=2, except_msg='nodes with cat_feature_node.graph_delimiter=''DMA'' not configured on the dma table. nodes with cat_feature_node.graph_delimiter=''DMA'' configured for unactive mapzone.', except_msg_feature=NULL, query_text='SELECT node_id, nodecat_id, the_geom, a.active, v_prefix_node.expl_id FROM v_prefix_node JOIN cat_node c ON id=nodecat_id JOIN cat_feature_node n ON n.id=c.nodetype_id LEFT JOIN (SELECT node_id, active FROM v_prefix_node JOIN (SELECT (json_array_elements_text((graphconfig::json->>''use'')::json))::json->>''nodeParent'' as node_id,   active FROM v_prefix_dma WHERE graphconfig IS NOT NULL )a USING (node_id)) a USING (node_id) WHERE graph_delimiter=''DMA'' AND (a.node_id IS NULL  OR node_id NOT IN (SELECT (json_array_elements_text((graphconfig::json->>''ignore'')::json))::text FROM v_prefix_dma WHERE active IS TRUE))  AND v_prefix_node.state > 0', info_msg='All nodes with cat_feature_node.graphdelimiter=''DMA'' are defined as nodeParent on dma.graphconfig', function_name='[gw_fct_graphanalytics_check_data]' WHERE fid=180;
UPDATE sys_fprocess SET fprocess_name='dqa-nodeparent acording with graphdelimiter', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check graph-data', addparam=NULL, except_level=2, except_msg='nodes with cat_feature_node.graph_delimiter=''DQA'' not configured on the dqa table. nodes with cat_feature_node.graph_delimiter=''DQA'' configured for unactive mapzone.', except_msg_feature=NULL, query_text='SELECT node_id, nodecat_id, the_geom, a.active,  v_prefix_node.expl_id FROM v_prefix_node JOIN cat_node c ON id=nodecat_id JOIN cat_feature_node n ON n.id=c.nodetype_id  LEFT JOIN (SELECT node_id, active FROM v_prefix_node JOIN (SELECT (json_array_elements_text((graphconfig::json->>''use'')::json))::json->>''nodeParent'' as node_id, active FROM v_prefix_dqa WHERE graphconfig IS NOT NULL )a USING (node_id)) a USING (node_id) WHERE graph_delimiter=''DQA'' AND (a.node_id IS NULL  OR node_id NOT IN (SELECT (json_array_elements_text((graphconfig::json->>''ignore'')::json))::text FROM v_prefix_dqa WHERE active IS TRUE))  AND v_prefix_node.state > 0', info_msg='All nodes with cat_feature_node.graphdelimiter=''DMA'' are defined as nodeParent on dma.graphconfig', function_name='[gw_fct_graphanalytics_check_data]' WHERE fid=181;
UPDATE sys_fprocess SET fprocess_name='presszone-nodeparent acording with graphdelimiter', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check graph-data', addparam=NULL, except_level=2, except_msg='nodes with cat_feature_node.graph_delimiter=''PRESSZONE'' not configured on the presszone table. nodes with cat_feature_node.graph_delimiter=''PRESSZONE'' configured for unactive mapzone.', except_msg_feature=NULL, query_text='SELECT node_id, nodecat_id, the_geom, a.active,v_prefix_node.expl_id FROM v_prefix_node JOIN cat_node c ON id=nodecat_id JOIN cat_feature_node n ON n.id=c.nodetype_id  LEFT JOIN (SELECT node_id, active FROM v_prefix_node JOIN (SELECT (json_array_elements_text((graphconfig::json->>''use'')::json))::json->>''nodeParent'' as node_id, active FROM v_prefix_presszone WHERE graphconfig IS NOT NULL )a USING (node_id)) a USING (node_id) WHERE graph_delimiter=''PRESSZONE'' AND (a.node_id IS NULL  OR node_id NOT IN (SELECT (json_array_elements_text((graphconfig::json->>''ignore'')::json))::text FROM v_prefix_presszone WHERE active IS TRUE))  AND v_prefix_node.state > 0', info_msg='All nodes with cat_feature_node.graphdelimiter=''PRESSZONE'' are defined as nodeParent on presszone.graphconfig', function_name='[gw_fct_graphanalytics_check_data]' WHERE fid=182;
UPDATE sys_fprocess SET fprocess_name='Nodes with state_type is_operative false', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='nodes with state > 0 and state_type.is_operative on FALSE. Please, check your data before continue', except_msg_feature=NULL, query_text='SELECT node_id, nodecat_id, the_geom, n.expl_id FROM node n JOIN value_state_type s ON id=state_type WHERE n.state > 0 AND s.is_operative IS FALSE AND verified <>''2''', info_msg='No nodes with state > 0 AND state_type.is_operative on FALSE found.', function_name='[gw_fct_om_check_data, gw_fct_pg2epa_check_data]' WHERE fid=187;
UPDATE sys_fprocess SET fprocess_name='Arcs with state_type is_operative false', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='arcs with state > 0 and state_type.is_operative on FALSE. Please, check your data before continue', except_msg_feature=NULL, query_text='SELECT arc_id, arccat_id, the_geom, a.expl_id FROM v_prefix_arc a JOIN value_state_type s ON id=state_type  
WHERE a.state > 0 AND s.is_operative IS FALSE AND verified <>''2''', info_msg='No arcs with state > 0 AND state_type.is_operative on FALSE found.', function_name='[gw_fct_om_check_data, gw_fct_pg2epa_check_data]' WHERE fid=188;
UPDATE sys_fprocess SET fprocess_name='Arcs with state=1 using nodes on state=0', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-topology', addparam=NULL, except_level=3, except_msg='arcs with state=1 using extremals nodes with state = 0. Please, check your data before continue', except_msg_feature=NULL, query_text='SELECT a.arc_id, arccat_id, a.the_geom, a.expl_id FROM v_prefix_arc a 
JOIN v_prefix_node n ON node_1=node_id WHERE a.state =1 AND n.state=0 UNION 
SELECT a.arc_id, arccat_id, a.the_geom, a.expl_id FROM v_prefix_arc a 
JOIN v_prefix_node n ON node_2=node_id WHERE a.state =1 AND n.state=0', info_msg='No arcs with state=1 using nodes with state=0 found.', function_name='[gw_fct_om_check_data]' WHERE fid=196;
UPDATE sys_fprocess SET fprocess_name='Arcs with state=1 using nodes on state=2', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-topology', addparam=NULL, except_level=3, except_msg='arcs with state=1 using extremals nodes with state = 2. Please, check your data before continue', except_msg_feature=NULL, query_text='SELECT a.arc_id, arccat_id, a.the_geom, a.expl_id FROM v_prefix_arc a JOIN v_prefix_node n ON node_1=node_id 
WHERE a.state =1 AND n.state=2 UNION   SELECT a.arc_id, arccat_id, a.the_geom, a.expl_id FROM v_prefix_arc a 
JOIN v_prefix_node n ON node_2=node_id WHERE a.state =1 AND n.state=2', info_msg='No arcs with state=1 using nodes with state=0 found.', function_name='[gw_fct_om_check_data]' WHERE fid=197;
UPDATE sys_fprocess SET fprocess_name='Tanks with null mandatory values', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=3, except_msg='tanks with null values at least on mandatory columns for tank (initlevel, minlevel, maxlevel, diameter, minvol).Take a look on temporal table to details', except_msg_feature=NULL, query_text='SELECT * FROM temp_anl_node WHERE fid=198 AND cur_user=current_user', info_msg='Tanks checked. No mandatory values missed.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=198;
UPDATE sys_fprocess SET fprocess_name='Connecs with duplicated customer_code', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='connecs customer code duplicated. Please, check your data before continue', except_msg_feature=NULL, query_text='SELECT customer_code FROM v_prefix_connec WHERE state=1 and customer_code IS NOT NULL group by customer_code, expl_id having count(*) > 1', info_msg='No connecs with customer code duplicated.', function_name='[gw_fct_om_check_data]' WHERE fid=201;
UPDATE sys_fprocess SET fprocess_name='feature which id is not an integer', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='which id is not an integer. Please, check your data before continue', except_msg_feature=NULL, query_text='SELECT CASE WHEN arc_id~E''^\\d+$'' THEN CAST (arc_id AS INTEGER)  ELSE 0 END  as feature_id, ''ARC'' as type, arccat_id as featurecat, the_geom, expl_id FROM v_prefix_arc UNION 
SELECT CASE WHEN node_id~E''^\\d+$'' THEN CAST (node_id AS INTEGER) ELSE 0 END as feature_id, ''NODE'' as type, nodecat_id as featurecat, the_geom, expl_id FROM v_prefix_node UNION 
SELECT CASE WHEN connec_id~E''^\\d+$'' THEN CAST (connec_id AS INTEGER) ELSE 0 END as feature_id, ''CONNEC'' as type, connecat_id as featurecat, the_geom, expl_id FROM v_prefix_connec', info_msg='All features with id integer.', function_name='[gw_fct_om_check_data]' WHERE fid=202;
UPDATE sys_fprocess SET fprocess_name='Connec without link', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-topology', addparam=NULL, except_level=2, except_msg='connecs without links or connecs over arc without arc_id. gullies without links or gullies over arc without arc_id.', except_msg_feature=NULL, query_text='SELECT connec_id, connecat_id, c.the_geom, c.expl_id from v_prefix_connec c WHERE c.state= 1 
AND connec_id NOT IN (SELECT feature_id FROM link) EXCEPT  
SELECT connec_id, connecat_id, c.the_geom, c.expl_id FROM v_prefix_connec c 
LEFT JOIN arc a USING (arc_id) WHERE c.state= 1 
AND arc_id IS NOT NULL AND st_dwithin(c.the_geom, a.the_geom, 0.1)', info_msg='All connecs have links or are over arc with arc_id. All gullies have links or are over arc with arc_id.', function_name='[gw_fct_om_check_data]' WHERE fid=204;
UPDATE sys_fprocess SET fprocess_name='Connec chain with different arc_id ', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='chained connecs or gullies with different arc_id. chained connecs with different arc_id.', except_msg_feature=NULL, query_text='with c as 
(select v_prefix_connec.connec_id as id, arc_id as arc, 
v_prefix_connec.connecat_id as feature_catalog, the_geom, v_prefix_connec.expl_id from v_prefix_connec)     
select c1.id, c1.feature_catalog, c1.the_geom, c1.expl_id from link a 
left join c c1 on a.feature_id = c1.id 
left join c c2 on a.exit_id = c2.id 
where (a.exit_type =''CONNEC'') and c1.arc <> c2.arc ', info_msg='All chained connecs and gullies have the same arc_id All chained connecs have the same arc_id', function_name='[gw_fct_om_check_data]' WHERE fid=205;
UPDATE sys_fprocess SET fprocess_name='Nodes ischange without change of dn/pn/material', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check graph-data', addparam=NULL, except_level=2, except_msg='nodes with ischange on 1 (true) without any variation of arcs in terms of diameter, pn or material. Please, check your data before continue.', except_msg_feature=NULL, query_text='SELECT n.node_id, count(*), nodecat_id, the_geom, a.expl_id FROM (SELECT node_1 as node_id, arccat_id, v_edit_arc.expl_id FROM v_edit_arc WHERE node_1 IN (SELECT node_id FROM v_edit_node JOIN cat_node ON id=nodecat_id WHERE ischange=1) UNION SELECT node_2, arccat_id, v_edit_arc.expl_id FROM v_edit_arc WHERE node_2 IN (SELECT node_id FROM v_edit_node JOIN cat_node ON id=nodecat_id WHERE ischange=1) GROUP BY 1,2,3) a	JOIN node n USING (node_id) GROUP BY 1,3,4,5 HAVING count(*) <> 2', info_msg='No nodes ''ischange'' without real change have been found.', function_name='[gw_fct_graphanalytics_check_data]' WHERE fid=208;
UPDATE sys_fprocess SET fprocess_name='Change of dn/pn/material without node ischange', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check graph-data', addparam=NULL, except_level=2, except_msg='nodes where arc catalog changes without nodecat with ischange on 0 or 2 (false or maybe). Please, check your data before continue.', except_msg_feature=NULL, query_text='SELECT node_id, nodecat_id, array_agg(arccat_id) as arccat_id, the_geom, node.expl_id FROM ( SELECT count(*), node_id, arccat_id FROM   (SELECT node_1 as node_id, arccat_id FROM v_prefix_arc UNION ALL SELECT node_2, arccat_id FROM v_prefix_arc)a GROUP BY 2,3 HAVING count(*) <> 2 ORDER BY 2) b   JOIN node USING (node_id) JOIN cat_node ON id=nodecat_id WHERE ischange=0 GROUP By 1,2,4,5 HAVING count(*)=2', info_msg='No nodes without ''ischange'' where arc changes have been found', function_name='[gw_fct_graphanalytics_check_data]' WHERE fid=209;
UPDATE sys_fprocess SET fprocess_name='Connecs with customer code null', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='connecs with customer code null. Please, check your data before continue', except_msg_feature=NULL, query_text='SELECT connec_id FROM v_prefix_connec WHERE state=1 and customer_code IS NULL', info_msg='No connecs with null customer code.', function_name='[gw_fct_om_check_data]' WHERE fid=210;
UPDATE sys_fprocess SET fprocess_name='Check arc drawing direction', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-topology', addparam=NULL, except_level=2, except_msg='arcs with drawing direction different than definition of node_1, node_2', except_msg_feature=NULL, query_text='SELECT a.arc_id , arccat_id, a.the_geom, a.expl_id FROM v_prefix_arc a, v_prefix_node n WHERE st_dwithin(st_startpoint(a.the_geom), n.the_geom, 0.0001) and node_2 = node_id   UNION   SELECT a.arc_id , arccat_id, a.the_geom, a.expl_id  FROM v_prefix_arc a, v_prefix_node n WHERE st_dwithin(st_endpoint(a.the_geom), n.the_geom, 0.0001) and node_1 = node_id', info_msg='No arcs with drawing direction different than definition of node_1, node_2', function_name='[gw_fct_om_check_data]' WHERE fid=223;
UPDATE sys_fprocess SET fprocess_name='Arcs less than 20 cm.', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-topology', addparam=NULL, except_level=2, except_msg='pipes with length less than node proximity distance configured.', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_inp_pipe WHERE st_length(the_geom) < (SELECT value::json->>''value'' FROM config_param_system WHERE parameter = ''edit_node_proximity'')::float', info_msg='Standard minimun length checked. No values less than node proximity distance configured.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=229;
UPDATE sys_fprocess SET fprocess_name='arcs less than 5 cm.', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-topology', addparam=NULL, except_level=3, except_msg='pipes with length less than configured minimum length.', except_msg_feature=NULL, query_text='SELECT the_geom, st_length(the_geom) AS length FROM v_edit_inp_pipe WHERE st_length(the_geom) < (SELECT value FROM config_param_system WHERE parameter = ''epa_arc_minlength'')::float', info_msg='Critical minimun length checked. No values less than configured minimum length found.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=230;
UPDATE sys_fprocess SET fprocess_name='Conduits with negative slope and inverted slope', project_type='ud', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-topology', addparam=NULL, except_level=3, except_msg='arcs with inverted slope false and slope negative values. Please, check your data before continue', except_msg_feature=NULL, query_text='SELECT a.arc_id, arccat_id, a.the_geom, expl_id FROM v_prefix_arc a WHERE sys_slope < 0 AND state > 0 AND inverted_slope IS FALSE', info_msg='No arcs with inverted slope checked found.', function_name='[gw_fct_om_check_data]' WHERE fid=251;
UPDATE sys_fprocess SET fprocess_name='Features state=2 are involved in psector', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=3, except_msg='planified arcs without psector. planified nodes without psector. planified connecs without psector. planified gullys without psector. features with state=2 without psector assigned. Please, check your data before continue', except_msg_feature=NULL, query_text='SELECT a.feature_id, a.feature, a.catalog, a.the_geom, count(*) FROM (
SELECT node_id as feature_id, ''NODE'' as feature, nodecat_id as catalog, 
the_geom FROM v_edit_node WHERE state=2 AND node_id NOT IN 
(select node_id FROM plan_psector_x_node) UNION 
SELECT arc_id as feature_id, ''ARC'' as feature, arccat_id as catalog, the_geom  
FROM v_edit_arc WHERE state=2 AND arc_id NOT IN 
(select arc_id FROM plan_psector_x_arc) UNION 
SELECT connec_id as feature_id, ''CONNEC'' as feature, connecat_id  as catalog, 
the_geom  FROM v_edit_connec WHERE state=2 AND connec_id NOT IN 
(select connec_id FROM plan_psector_x_connec)) a  
GROUP BY a.feature_id, a.feature , a.catalog, a.the_geom', info_msg='There are no features with state=2 without psector.', function_name='[gw_fct_plan_check_data, gw_fct_om_check_data]' WHERE fid=252;
UPDATE sys_fprocess SET fprocess_name='State not according with state_type', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='features with state without concordance with state_type. Please, check your data before continue features with state without concordance with state_type. Please, check your data before continue', except_msg_feature=NULL, query_text='SELECT arc_id as id, a.state, state_type FROM v_prefix_arc a 
JOIN value_state_type b ON id=state_type WHERE a.state <> b.state UNION 
SELECT node_id as id, a.state, state_type FROM v_prefix_node a 
JOIN value_state_type b ON id=state_type WHERE a.state <> b.state UNION 
SELECT connec_id as id, a.state, state_type FROM v_prefix_connec a 
JOIN value_state_type b ON id=state_type WHERE a.state <> b.state UNION 
SELECT element_id as id, a.state, state_type FROM v_prefix_element a 
JOIN value_state_type b ON id=state_type WHERE a.state <> b.state', info_msg='No features without concordance against state and state_type.   No features without concordance against state and state_type.', function_name='[gw_fct_om_check_data]' WHERE fid=253;
UPDATE sys_fprocess SET fprocess_name='Features with code null', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='features with code with NULL values. Please, check your data before continue with code with NULL values. Please, check your data before continue', except_msg_feature=NULL, query_text='SELECT arc_id, arccat_id, the_geom FROM v_prefix_arc WHERE code IS NULL UNION 
SELECT node_id, nodecat_id, the_geom FROM v_prefix_node WHERE code IS NULL UNION 
SELECT connec_id, connecat_id, the_geom FROM v_prefix_connec WHERE code IS NULL UNION 
SELECT element_id, elementcat_id, the_geom FROM v_prefix_element WHERE code IS NULL', info_msg='No features (arc, node, connec, gully, element) with NULL values on code found. No features (arc, node, connec, element) with NULL values on code found.', function_name='[gw_fct_om_check_data]' WHERE fid=254;
UPDATE sys_fprocess SET fprocess_name='Orphan polygons', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-topology', addparam=NULL, except_level=2, except_msg='polygons without parent. Check your data before continue. polygons without parent. Check your data before continue.', except_msg_feature=NULL, query_text='SELECT pol_id FROM polygon WHERE feature_id IS NULL OR feature_id NOT IN (SELECT gully_id FROM gully UNION
SELECT node_id FROM node UNION SELECT connec_id FROM connec)', info_msg='No polygons without parent feature found. No polygons without parent feature found.', function_name='[gw_fct_om_check_data]' WHERE fid=255;
UPDATE sys_fprocess SET fprocess_name='Connec or gully without or with wrong arc_id', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='connecs without or with incorrect arc_id. gullies without or with incorrect arc_id.', except_msg_feature=NULL, query_text='SELECT c.connec_id, c.connecat_id, c.the_geom, c.expl_id, l.feature_type, link_id FROM arc a, link l 
JOIN connec c ON l.feature_id = c.connec_id WHERE st_dwithin(a.the_geom, st_endpoint(l.the_geom), 0.01) AND exit_type = ''ARC'' 
AND (a.arc_id <> c.arc_id or c.arc_id is null)   AND l.feature_type = ''CONNEC'' AND a.state=1 and c.state = 1 and l.state=1 EXCEPT 
SELECT c.connec_id, c.connecat_id, c.the_geom, c.expl_id, l.feature_type, link_id  FROM node n, link l JOIN connec c ON l.feature_id = c.connec_id 
WHERE st_dwithin(n.the_geom, st_endpoint(l.the_geom), 0.01) AND exit_type IN (''NODE'', ''ARC'')  AND l.feature_type = ''CONNEC'' AND n.state=1 and c.state = 1 
and l.state=1 ORDER BY feature_type, link_id', info_msg='All connecs have correct arc_id. All gullies have correct arc_id.', function_name='[gw_fct_om_check_data]' WHERE fid=257;
UPDATE sys_fprocess SET fprocess_name='Link without feature_id', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='links with state > 0 without feature_id.', except_msg_feature=NULL, query_text='SELECT link_id, the_geom FROM v_prefix_link where feature_id is null and state > 0', info_msg='All links state > 0 have feature_id.', function_name='[gw_fct_om_check_data]' WHERE fid=260;
UPDATE sys_fprocess SET fprocess_name='Link without exit_id', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='links with state > 0 without exit_id.', except_msg_feature=NULL, query_text='SELECT link_id, the_geom FROM v_prefix_link where exit_id is null and state > 0', info_msg='All links state > 0 have exit_id.', function_name='[gw_fct_om_check_data]' WHERE fid=261;
UPDATE sys_fprocess SET fprocess_name='Features state=1 and end date', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='features on service with value of end date.', except_msg_feature=NULL, query_text='SELECT arc_id as feature_id  from v_prefix_arc where state = 1 and enddate is not null UNION 
SELECT node_id from v_prefix_node where state = 1 and enddate is not null UNION 
SELECT connec_id from v_prefix_connec where state = 1 and enddate is not null', info_msg='No features on service have value of end date', function_name='[gw_fct_om_check_data]' WHERE fid=262;
UPDATE sys_fprocess SET fprocess_name='Features state=0 without end date', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='features with state 0 without value of end date.', except_msg_feature=NULL, query_text='SELECT arc_id as feature_id  from v_prefix_arc where state = 0 and enddate is null UNION 
SELECT node_id from v_prefix_node where state = 0 and enddate is null UNION 
SELECT connec_id from v_prefix_connec where state = 0 and enddate is null ', info_msg='No features with state 0 are missing the end date', function_name='[gw_fct_om_check_data]' WHERE fid=263;
UPDATE sys_fprocess SET fprocess_name='Features state=1 and end date before start date', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='features with end date earlier than built date.', except_msg_feature=NULL, query_text='SELECT arc_id as feature_id  from v_prefix_arc where enddate < builtdate and state = 1 UNION 
SELECT node_id from v_prefix_node where enddate < builtdate and state = 1 UNION 
SELECT connec_id from v_prefix_connec where enddate < builtdate and state = 1', info_msg='No features with end date earlier than built date', function_name='[gw_fct_om_check_data]' WHERE fid=264;
UPDATE sys_fprocess SET fprocess_name='Automatic links with more than 100m', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-topology', addparam=NULL, except_level=2, except_msg='automatic links with longitude out-of-range found.', except_msg_feature=NULL, query_text='SELECT * FROM v_prefix_link where st_length(the_geom) > 100', info_msg='No automatic links with out-of-range Longitude found.', function_name='[gw_fct_om_check_data]' WHERE fid=265;
UPDATE sys_fprocess SET fprocess_name='Duplicated ID between arc, node, connec, gully', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='features with duplicated ID value between arc, node, connec, gully features with duplicated ID values between arc, node, connec, gully', except_msg_feature=NULL, query_text='SELECT node_id AS feature_id FROM v_prefix_node n JOIN v_prefix_arc a ON a.arc_id=n.node_id UNION
SELECT node_id FROM v_prefix_node n JOIN v_prefix_connec c ON c.connec_id=n.node_id UNION 
SELECT a.arc_id FROM v_prefix_arc a JOIN v_prefix_connec c ON c.connec_id=a.arc_id', info_msg='All features have a diferent ID to be correctly identified', function_name='[gw_fct_om_check_data]' WHERE fid=266;
UPDATE sys_fprocess SET fprocess_name='Sectors without graphconfig', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check graph-config', addparam=NULL, except_level=3, except_msg='sectors on sector table with graphconfig not configured.', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_sector WHERE graphconfig IS NULL and sector_id > 0 AND active IS TRUE', info_msg='All sectors has graphconfig values not null.', function_name='[gw_fct_graphanalytics_check_data]' WHERE fid=268;
UPDATE sys_fprocess SET fprocess_name='DMA without graphconfig', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check graph-config', addparam=NULL, except_level=3, except_msg='dmas on dma table with graphconfig not configured.', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_dma WHERE graphconfig IS NULL and dma_id > 0  AND active IS TRUE', info_msg='All dma has graphconfig values not null.', function_name='[gw_fct_graphanalytics_check_data]' WHERE fid=269;
UPDATE sys_fprocess SET fprocess_name='DQA without graphconfig', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check graph-config', addparam=NULL, except_level=3, except_msg='dqas on dqa table with graphconfig not configured.', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_dqa WHERE graphconfig IS NULL and dqa_id > 0 AND active IS TRUE', info_msg='All dqa has graphconfig values not null.', function_name='[gw_fct_graphanalytics_check_data]' WHERE fid=270;
UPDATE sys_fprocess SET fprocess_name='Presszone without graphconfig', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check graph-config', addparam=NULL, except_level=3, except_msg='presszones on presszone table with graphconfig not configured.', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_presszone WHERE graphconfig IS NULL and presszone_id > 0::text AND active IS TRUE', info_msg='All presszones has graphconfig values not null.', function_name='[gw_fct_graphanalytics_check_data]' WHERE fid=271;
UPDATE sys_fprocess SET fprocess_name='Missing data on inp tables', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=3, except_msg='missed features on inp tables. Please, check your data before continue', except_msg_feature=NULL, query_text='SELECT arc_id, ''arc'' FROM v_edit_arc LEFT JOIN    
(SELECT arc_id from inp_pipe UNION SELECT arc_id FROM inp_virtualvalve UNION SELECT arc_id FROM inp_virtualpump) b using (arc_id)   
WHERE b.arc_id IS NULL AND state > 0 AND epa_type !=''UNDEFINED'' 
UNION 
SELECT node_id, ''node'' FROM v_edit_node LEFT JOIN
(select node_id from inp_shortpipe UNION select node_id from inp_valve ç
UNION select node_id from inp_tank 
UNION select node_id FROM inp_reservoir 
UNION select node_id FROM inp_pump
UNION SELECT node_id from inp_inlet
UNION SELECT node_id from inp_junction) b USING (node_id)
WHERE b.node_id IS NULL AND state >0 AND epa_type !=''UNDEFINED''', info_msg='No features missed on inp_tables found.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=272;
UPDATE sys_fprocess SET fprocess_name='Null values on valv_type table', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=3, except_msg='valves with null values on valv_type column.', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_inp_valve WHERE valv_type IS NULL', info_msg='Valve valv_type checked. No mandatory values missed.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=273;
UPDATE sys_fprocess SET fprocess_name='Null values on valve status', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=3, except_msg='valves with null values on mandatory column status.', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_inp_valve WHERE status IS NULL AND state > 0', info_msg='Valve status checked. No mandatory values missed.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=274;
UPDATE sys_fprocess SET fprocess_name='Null values on valve pressure', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=3, except_msg='PBV-PRV-PSV valves with null values on the mandatory column for Pressure valves.', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_inp_valve WHERE ((valv_type=''PBV'' OR valv_type=''PRV'' OR valv_type=''PSV'') AND (pressure IS NULL))', info_msg='PBC-PRV-PSV valves checked. No mandatory values missed.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=275;
UPDATE sys_fprocess SET fprocess_name='Null values on GPV valve config', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=3, except_msg='GPV valves with null values on mandatory column for General purpose valves.', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_inp_valve WHERE ((valv_type=''GPV'') AND (curve_id IS NULL))', info_msg='GPV valves checked. No mandatory values missed.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=276;
UPDATE sys_fprocess SET fprocess_name='Null values on TCV valve config', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=3, except_msg='TCV valves with null values on mandatory column for Losses Valves.', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_inp_valve WHERE valv_type=''TCV'' AND coef_loss IS NULL', info_msg='TCV valves checked. No mandatory values missed.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=277;
UPDATE sys_fprocess SET fprocess_name='Null values on FCV valve config', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=3, except_msg='FCV valves with null values on mandatory column for Flow Control Valves.', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_inp_valve WHERE ((valv_type=''FCV'') AND (flow IS NULL))', info_msg='FCV valves checked. No mandatory values missed.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=278;
UPDATE sys_fprocess SET fprocess_name='Null values on pump type', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=3, except_msg='pumps with null values on pump_type column. virtualpump''''s with null values on pump_type column.', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_inp_pump WHERE pump_type IS NULL', info_msg='Pumps checked. No mandatory values for pump_type missed. Virtualpumps checked. No mandatory values for pump_type missed.', function_name='[gw_fct_plan_check_data, gw_fct_pg2epa_check_data]' WHERE fid=279;
UPDATE sys_fprocess SET fprocess_name='Null values on pump curve_id ', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=3, except_msg='pumps with null values at least on mandatory column curve_id. virtualpumps with null values at least on mandatory column curve_id.', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_inp_pump WHERE curve_id IS NULL', info_msg='Pumps checked. No mandatory values for curve_id missed. Virtualpumps checked. No mandatory values for curve_id missed.', function_name='[gw_fct_plan_check_data, gw_fct_pg2epa_check_data]' WHERE fid=280;
UPDATE sys_fprocess SET fprocess_name='Null values on additional pump curve_id ', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=3, except_msg='additional pumps with null values at least on mandatory column curve_id.', except_msg_feature=NULL, query_text='SELECT * FROM inp_pump_additional JOIN v_edit_inp_pump USING (node_id) WHERE inp_pump_additional.curve_id IS NULL', info_msg='Additional pumps checked. No mandatory values for curve_id missed.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=281;
UPDATE sys_fprocess SET fprocess_name='Null values on roughness catalog ', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-config', addparam=NULL, except_level=3, except_msg='pipes with null values for roughness. Check roughness catalog columns (init_age,end_age,roughness) before continue.''', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_inp_pipe JOIN cat_arc ON id = arccat_id JOIN cat_mat_roughness USING  (matcat_id) WHERE init_age IS NULL OR end_age IS NULL OR roughness IS NULL', info_msg='Roughness catalog checked. No mandatory values missed.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=282;
UPDATE sys_fprocess SET fprocess_name='Null values on arc catalog - dint', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-config', addparam=NULL, except_level=3, except_msg='registers on arc''''s catalog with null values on dint column.''', except_msg_feature=NULL, query_text='SELECT * FROM cat_arc WHERE dint IS NULL', info_msg='Dint for arc''''s catalog checked. No values missed.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=283;
UPDATE sys_fprocess SET fprocess_name='Connec or gully with different expl_id than arc', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='connecs with exploitation different than the exploitation of the related arc', except_msg_feature=NULL, query_text='SELECT DISTINCT connec_id, connecat_id, c.the_geom, c.expl_id 
FROM v_prefix_connec c JOIN v_prefix_arc b using (arc_id) WHERE b.expl_id::text != c.expl_id::text', info_msg='All connecs or gullys have the same exploitation as the related arc', function_name='[gw_fct_om_check_data]' WHERE fid=291;
UPDATE sys_fprocess SET fprocess_name='Non-mandatory nodarc with less than two arcs', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-topology', addparam=NULL, except_level=2, except_msg='NON-mandatory node2arcs with less than two arcs. It will be transformed on the fly using only one arc''', except_msg_feature=NULL, query_text='SELECT * FROM temp_anl_node WHERE fid = 292', info_msg='No results found for NON-mandatory node2arcs with less than two arcs.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=292;
UPDATE sys_fprocess SET fprocess_name='Check for inp_node tables and epa_type consistency', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=3, except_msg='node features with epa_type not according with epa table. Check your data before continue', except_msg_feature=NULL, query_text='SELECT * FROM temp_anl_node WHERE fid=294 AND cur_user=current_user', info_msg='Epa type for node features checked. No inconsistencies aganints epa table found.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=294;
UPDATE sys_fprocess SET fprocess_name='Check for inp_connec tables and epa_type consistency', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=3, except_msg='connecs features with epa_type not according with epa table. Check your data before continue.', except_msg_feature=NULL, query_text='SELECT * FROM (SELECT count(*) as c1, null AS c2 FROM connec UNION SELECT null, count(*) FROM inp_connec)a1 WHERE c1 > c2', info_msg='Epa type for arc features checked. No inconsistencies aganints epa table found.Epa type for connec features checked. No inconsistencies aganints epa table found.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=295;
UPDATE sys_fprocess SET fprocess_name='Control null values on crm.hydrometer.code', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Function process', addparam='{"addSchema":"crm"}'::json, except_level=3, except_msg='hydrometers in crm schema without code.', except_msg_feature=NULL, query_text='SELECT id FROM crm.hydrometer WHERE code IS NULL', info_msg='All hydrometers on crm schema have code', function_name='[gw_fct_om_check_data]' WHERE fid=299;
UPDATE sys_fprocess SET fprocess_name='Check values of system variables', project_type='utils', parameters=NULL, "source"='core', isaudit=false, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='system variables with out-of-standard values.', except_msg_feature=NULL, query_text='SELECT parameter FROM config_param_system WHERE lower(value) != lower(standardvalue) AND standardvalue IS NOT NULL  AND  standardvalue NOT ILIKE ''{%}'' UNION 
SELECT parameter FROM config_param_system  WHERE lower(json_extract_path_text(value::json,''activated'')) != lower(json_extract_path_text(standardvalue::json,''activated'')) AND standardvalue IS NOT NULL AND standardvalue ILIKE ''{%}''', info_msg='No system variables with values out-of-standars found.', function_name='[gw_fct_om_check_data]' WHERE fid=302;
UPDATE sys_fprocess SET fprocess_name='Check cat_feature field active', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='features without value on field "active" from cat_feature.', except_msg_feature=NULL, query_text='SELECT * FROM cat_feature WHERE active IS NULL', info_msg='All features have value on field "active"', function_name='[gw_fct_admin_check_data]' WHERE fid=303;
UPDATE sys_fprocess SET fprocess_name='Check cat_feature field code_autofill', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='features without value on field "code_autofill" from cat_feature.', except_msg_feature=NULL, query_text='SELECT * FROM cat_feature WHERE code_autofill IS NULL', info_msg='All features have value on field "code_autofill"', function_name='[gw_fct_admin_check_data]' WHERE fid=304;
UPDATE sys_fprocess SET fprocess_name='Check cat_feature_node field num_arcs', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='nodes without value on field "num_arcs" from cat_feature_node.', except_msg_feature=NULL, query_text='SELECT * FROM cat_feature_node WHERE num_arcs IS NULL', info_msg='All nodes have value on field "num_arcs"', function_name='[gw_fct_admin_check_data]' WHERE fid=305;
UPDATE sys_fprocess SET fprocess_name='Check cat_feature_node field isarcdivide', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='nodes without value on field "isarcdivide" from cat_feature_node.', except_msg_feature=NULL, query_text='SELECT * FROM cat_feature_node WHERE isarcdivide IS NULL', info_msg='All nodes have value on field "isarcdivide"', function_name='[gw_fct_admin_check_data]' WHERE fid=306;
UPDATE sys_fprocess SET fprocess_name='Check cat_feature_node field graph_delimiter', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='nodes without value on field "graph_delimiter" from cat_feature_node.', except_msg_feature=NULL, query_text='SELECT * FROM cat_feature_node WHERE graph_delimiter IS NULL', info_msg='All nodes have value on field "graph_delimiter"', function_name='[gw_fct_admin_check_data]' WHERE fid=307;
UPDATE sys_fprocess SET fprocess_name='Check cat_feature_node field isexitupperintro', project_type='ud', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='nodes without value on field "isexitupperintro" from cat_feature_node.', except_msg_feature=NULL, query_text='SELECT * FROM cat_feature_node WHERE isexitupperintro IS NULL', info_msg='All nodes have value on field "isexitupperintro"', function_name='[gw_fct_admin_check_data]' WHERE fid=308;
UPDATE sys_fprocess SET fprocess_name='Check cat_feature_node field choose_hemisphere', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='nodes without value on field "choose_hemisphere" from cat_feature_node.', except_msg_feature=NULL, query_text='SELECT * FROM cat_feature_node WHERE choose_hemisphere IS NULL', info_msg='All nodes have value on field "choose_hemisphere"', function_name='[gw_fct_admin_check_data]' WHERE fid=309;
UPDATE sys_fprocess SET fprocess_name='Check cat_feature_node field isprofilesurface', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='nodes without value on field "isprofilesurface" from cat_feature_node. Features - '',v_feature_list::text,''.''', except_msg_feature=NULL, query_text='SELECT * FROM cat_feature_node WHERE isprofilesurface IS NULL', info_msg='All nodes have value on field "isprofilesurface"', function_name='[gw_fct_admin_check_data]' WHERE fid=310;
UPDATE sys_fprocess SET fprocess_name='Check child view man table definition', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='view wrongly defined man_table', except_msg_feature=NULL, query_text='WITH subq_1 as (
SELECT id, system_id, child_layer from cat_Feature
), subq_2 as (
select*from information_schema.views a join subq_1 m on m.child_layer = a.table_name
where a.table_schema = current_schema
), subq_3 as (
select position(concat(''man_'',lower(system_id)) in view_definition) from subq_2
)
select*from subq_3 where position = 0', info_msg='All views are well defined in man_table', function_name='[gw_fct_admin_check_data]' WHERE fid=311;
UPDATE sys_fprocess SET fprocess_name='Check child view addfields', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=2, except_msg='active addfields that may not be present on its corresponding child view:', except_msg_feature=NULL, query_text='WITH subq AS (
    SELECT s.param_name, s.cat_feature_id FROM sys_addfields s
    LEFT JOIN cat_feature f ON s.cat_feature_id = f.id
    WHERE s.feature_type = ''CHILD'' AND s.active IS TRUE AND s.cat_feature_id IS NULL
)
SELECT string_agg(concat(key, '': '', value), ''; '') AS "string_agg"
FROM (SELECT key, value 
        FROM subq, json_each_text(json_build_object(''addfield'', COALESCE(param_name, ''null''), ''cat_feature'', COALESCE(cat_feature_id::text, ''null'')
             )
         )
) AS pairs', info_msg=NULL, function_name='[gw_fct_admin_check_data]' WHERE fid=312;
UPDATE sys_fprocess SET fprocess_name='Find not existing child views', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='views defined in cat_feature table but is not created in a DB.', except_msg_feature=NULL, query_text='SELECT c.child_layer FROM cat_feature c
left join information_schema.views a on a.table_name= c.child_layer
where a.table_schema = current_schema and a.view_definition is null', info_msg='All child views are created and defined in cat_feature and', function_name='[gw_fct_admin_check_data]' WHERE fid=313;
UPDATE sys_fprocess SET fprocess_name='Find active features without child views', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='active features which views names are not present in cat_feature table.', except_msg_feature=NULL, query_text='SELECT string_agg(id,'','') FROM cat_feature WHERE active IS TRUE AND child_layer IS NULL', info_msg='All active features have child view name in cat_feature table', function_name='[gw_fct_admin_check_data]' WHERE fid=314;
UPDATE sys_fprocess SET fprocess_name='Check definition on config_info_layer_x_type', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='active features which views are not defined in config_info_layer_x_type.', except_msg_feature=NULL, query_text='SELECT string_agg(id, ''; '') FROM cat_feature WHERE active IS TRUE AND child_layer not in (select tableinfo_id FROM config_info_layer_x_type)', info_msg='All active features have child view defined in config_info_layer_x_type', function_name='[gw_fct_admin_check_data]' WHERE fid=315;
UPDATE sys_fprocess SET fprocess_name='Check definition on config_form_fields', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='active features which views are not defined in config_form_fields.', except_msg_feature=NULL, query_text='SELECT string_agg(concat(cat_feature_id, '': '', param_name), ''; '') FROM sys_addfields 
JOIN cat_feature ON cat_feature.id=sys_addfields.cat_feature_id WHERE sys_addfields.active IS TRUE AND param_name not IN 
(SELECT columnname FROM config_form_fields JOIN cat_feature ON cat_feature.child_layer=formname)', info_msg='All active features have child view defined in config_form_fields', function_name='[gw_fct_admin_check_data]' WHERE fid=316;
UPDATE sys_fprocess SET fprocess_name='Find ve_* views not defined in cat_feature', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=2, except_msg='views defined in a DB but is not related to any feature in cat_feature.', except_msg_feature=NULL, query_text='select string_agg(child_layer,'','') FROM cat_feature where child_layer IS NOT NULL', info_msg='All views in DB are related to features in cat_feature', function_name='[gw_fct_admin_check_data]' WHERE fid=317;
UPDATE sys_fprocess SET fprocess_name='Check config_form_fields field datatype', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='features form fields in config_form_fields that don''''t have data type.', except_msg_feature=NULL, query_text='SELECT string_agg(concat(formname, '': '', columnname), ''; '') FROM config_form_fields WHERE datatype IS NULL AND formtype=''form_feature''', info_msg='All feature form fields have defined data type.', function_name='[gw_fct_admin_check_data]' WHERE fid=318;
UPDATE sys_fprocess SET fprocess_name='Check config_form_fields field widgettype', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='features form fields in config_form_fields that don''''t have widget type.', except_msg_feature=NULL, query_text='SELECT string_agg(concat(formname, '': '', columnname), ''; '') FROM config_form_fields WHERE widgettype IS NULL AND formtype=''form_feature''', info_msg='All feature form fields have defined widget type.', function_name='[gw_fct_admin_check_data]' WHERE fid=319;
UPDATE sys_fprocess SET fprocess_name='Check config_form_fields field dv_querytext', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='features form fields in config_form_fields that are combo or typeahead but don''''t have dv_querytext defined.', except_msg_feature=NULL, query_text='SELECT string_agg(concat(formname, '': '', columnname), ''; '') FROM config_form_fields WHERE (widgettype = ''combo'' or widgettype =''typeahead'') and dv_querytext is null and columnname !=''composer''
', info_msg='All feature form fields with widget type combo or typeahead have dv_querytext defined.', function_name='[gw_fct_admin_check_data]' WHERE fid=320;
UPDATE sys_fprocess SET fprocess_name='Check config_form_fields for addfields definition', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='addfields that are not defined in config_form_fields.', except_msg_feature=NULL, query_text='SELECT string_agg(param_name, ''; '') FROM sys_addfields 
JOIN cat_feature ON cat_feature.id=sys_addfields.cat_feature_id WHERE sys_addfields.active IS TRUE AND param_name not IN 
(SELECT columnname FROM config_form_fields JOIN cat_feature ON cat_feature.child_layer=formname)', info_msg='All addfields are defined in config_form_fields.', function_name='[gw_fct_admin_check_data]' WHERE fid=321;
UPDATE sys_fprocess SET fprocess_name='Check config_form_fields layoutorder duplicated', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check admin', addparam=NULL, except_level=3, except_msg='form names with duplicated layout order defined in config_form_fields: ''', except_msg_feature=NULL, query_text='SELECT array_agg(a.list::text) FROM (SELECT concat(''Formname: '',formname, '', layoutname: '',layoutname, '', layoutorder: '',layoutorder) as list FROM config_form_fields WHERE formtype = ''feature'' AND hidden is false 
group by layoutorder,formname,layoutname having count(*)>1)a', info_msg='All fields defined in config_form_fields have unduplicated order.', function_name='[gw_fct_admin_check_data]' WHERE fid=322;
UPDATE sys_fprocess SET fprocess_name='Check cat_arc field active', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=3, except_msg='rows without values on cat_arc.active column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_arc WHERE active IS NULL', info_msg='There is/are no rows without values on cat_arc.active column.', function_name='[gw_fct_plan_check_data]' WHERE fid=323;
UPDATE sys_fprocess SET fprocess_name='Check cat_arc field cost', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=2, except_msg='rows without values on cat_arc.cost column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_arc WHERE cost IS NULL and active=TRUE', info_msg='There is/are no rows without values on cat_arc.cost column.', function_name='[gw_fct_plan_check_data]' WHERE fid=324;
UPDATE sys_fprocess SET fprocess_name='Check cat_arc field m2bottom_cost', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=2, except_msg='rows without values on cat_arc.m2bottom_cost column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_arc WHERE m2bottom_cost IS NULL and active=TRUE', info_msg='There is/are no rows without values on cat_arc.m2bottom_cost column.', function_name='[gw_fct_plan_check_data]' WHERE fid=325;
UPDATE sys_fprocess SET fprocess_name='Check cat_arc field m3protec_cost', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=2, except_msg='rows without values on cat_arc.m3protec_cost column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_arc WHERE m3protec_cost IS NULL and active=TRUE', info_msg='There is/are no rows without values on cat_arc.m3protec_cost column.', function_name='[gw_fct_plan_check_data]' WHERE fid=326;
UPDATE sys_fprocess SET fprocess_name='Check cat_node field active', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=3, except_msg='rows without values on cat_node.active column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_node WHERE active IS NULL', info_msg='There is/are no rows without values on cat_node.active column.', function_name='[gw_fct_plan_check_data]' WHERE fid=327;
UPDATE sys_fprocess SET fprocess_name='Check cat_node field cost', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=2, except_msg='rows without values on cat_node.cost column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_node WHERE cost IS NULL and active=TRUE', info_msg='There is/are no rows rows without values on cat_node.cost column.', function_name='[gw_fct_plan_check_data]' WHERE fid=328;
UPDATE sys_fprocess SET fprocess_name='Check cat_node field cost_column', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=2, except_msg='rows without values on cat_node.cost_unit column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_node WHERE cost_unit IS NULL and active=TRUE', info_msg='There is/are no rows without values on cat_node.cost_unit column.', function_name='[gw_fct_plan_check_data]' WHERE fid=329;
UPDATE sys_fprocess SET fprocess_name='Check cat_node field estimated_depth', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=2, except_msg='rows without values on cat_node.estimated_depth column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_node WHERE estimated_depth IS NULL and active=TRUE', info_msg='There is/are no rows without values on cat_node.estimated_depth column.', function_name='[gw_fct_plan_check_data]' WHERE fid=330;
UPDATE sys_fprocess SET fprocess_name='Check cat_node field estimated_y', project_type='ud', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=2, except_msg='rows without values on cat_node.estimated_y column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_node WHERE estimated_y IS NULL and active=TRUE', info_msg='There is/are no rows without values on cat_node.estimated_y column.', function_name='[gw_fct_plan_check_data]' WHERE fid=331;
UPDATE sys_fprocess SET fprocess_name='Check cat_connec field active', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=3, except_msg='rows without values on cat_connec.active column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_connec WHERE active IS NULL', info_msg='There is/are no rows without values on cat_connec.active column column.', function_name='[gw_fct_plan_check_data]' WHERE fid=332;
UPDATE sys_fprocess SET fprocess_name='Check cat_pavement field thickness', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=2, except_msg='rows without values on cat_pavement.thickness column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_pavement WHERE thickness IS NULL', info_msg='There is/are no rows without values on cat_pavement.thickness column.', function_name='[gw_fct_plan_check_data]' WHERE fid=336;
UPDATE sys_fprocess SET fprocess_name='Check cat_pavement field m2cost', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=2, except_msg='rows without values on cat_pavement.m2_cost column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_pavement WHERE m2_cost IS NULL', info_msg='There is/are no rows without values on cat_pavement.m2_cost column.', function_name='[gw_fct_plan_check_data]' WHERE fid=337;
UPDATE sys_fprocess SET fprocess_name='Check cat_soil field y_param', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=2, except_msg='rows without values on cat_soil.y_param column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_soil WHERE y_param IS NULL', info_msg='There is/are no rows without values on cat_soil.y_param column.', function_name='[gw_fct_plan_check_data]' WHERE fid=338;
UPDATE sys_fprocess SET fprocess_name='Check cat_soil field b', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=2, except_msg='rows without values on cat_soil.b column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_soil WHERE b IS NULL', info_msg='There is/are no rows without values on cat_soil.b column.', function_name='[gw_fct_plan_check_data]' WHERE fid=339;
UPDATE sys_fprocess SET fprocess_name='Check cat_soil field m3exc_cost', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=2, except_msg='rows without values on cat_soil.m3exc_cost column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_soil WHERE m3exc_cost IS NULL', info_msg='There is/are no rows without values on cat_soil.m3exc_cost column.', function_name='[gw_fct_plan_check_data]' WHERE fid=340;
UPDATE sys_fprocess SET fprocess_name='Check cat_soil field m3fill_cost', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=2, except_msg='rows without values on cat_soil.m3fill_cost column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_soil WHERE m3fill_cost IS NULL', info_msg='There is/are no rows without values on cat_soil.m3fill_cost column.', function_name='[gw_fct_plan_check_data]' WHERE fid=341;
UPDATE sys_fprocess SET fprocess_name='Check cat_soil field m3excess_cost', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=2, except_msg='rows without values on cat_soil.m3excess_cost column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_soil WHERE m3excess_cost IS NULL', info_msg='There is/are no rows without values on cat_soil.m3excess_cost column.', function_name='[gw_fct_plan_check_data]' WHERE fid=342;
UPDATE sys_fprocess SET fprocess_name='Check cat_soil field m2trenchl_cost', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=2, except_msg='rows without values on cat_soil.m2trenchl_cost column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_soil WHERE m2trenchl_cost IS NULL', info_msg='There is/are no rows without values on cat_soil.m2trenchl_cost column.', function_name='[gw_fct_plan_check_data]' WHERE fid=343;
UPDATE sys_fprocess SET fprocess_name='Check cat_grate field active', project_type='ud', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=3, except_msg='rows without values on cat_grate.active column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_grate WHERE active IS NULL', info_msg='There is/are no rows without values on cat_grate.active column.', function_name='[gw_fct_plan_check_data]' WHERE fid=344;
UPDATE sys_fprocess SET fprocess_name='Check plan_arc_x_pavement rows number', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=1, except_msg='rows more in arc than in table plan_arc_x_pavement', except_msg_feature=NULL, query_text='with arcs as (SELECT count(*) as a FROM arc WHERE state>0),
pavs as (SELECT count(*) as b FROM plan_arc_x_pavement)
select case when b < a then a-b else 0 end from arcs, pavs', info_msg='The number of rows of the plan_arc_x_pavement table is same than the arc table.', function_name='[gw_fct_plan_check_data]' WHERE fid=346;
UPDATE sys_fprocess SET fprocess_name='Check plan_arc_x_pavement field pavcat_id', project_type='utils', parameters=NULL, "source"='core', isaudit=false, fprocess_type='Check plan-config', addparam=NULL, except_level=2, except_msg='rows without values on plan_arc_x_pavement.pavcat_id column.', except_msg_feature=NULL, query_text='SELECT * FROM plan_arc_x_pavement WHERE pavcat_id IS NOT NULL', info_msg='There is/are no rows without values on rows without values on plan_arc_x_pavement.pavcat_id column.', function_name='[gw_fct_plan_check_data]' WHERE fid=347;
UPDATE sys_fprocess SET fprocess_name='Check arc state=2 with final nodes in psector', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-data', addparam=NULL, except_level=3, except_msg='operative arcs without final nodes in some psector.', except_msg_feature=NULL, query_text='SELECT DISTINCT ON (arc_id) * FROM (SELECT a.arc_id, a.arccat_id, pa.psector_id , node_1 as node, a.the_geom FROM v_edit_arc a  JOIN plan_psector_x_node pn1 ON pn1.node_id = a.node_1  left JOIN plan_psector_x_arc pa using (arc_id)  WHERE a.state = 1 AND pn1.state = 0 and pa.psector_id is null  UNION  SELECT a.arc_id, a.arccat_id, pa.psector_id, node_2, a.the_geom FROM v_edit_arc a  JOIN plan_psector_x_node pn2 ON pn2.node_id = a.node_2  left JOIN plan_psector_x_arc pa using (arc_id)  WHERE a.state = 1 AND pn2.state = 0 and pa.psector_id is null  ) b', info_msg='There are no arcs with state=1 with final nodes obsolete in psector.', function_name='[gw_fct_plan_check_data]' WHERE fid=354;
UPDATE sys_fprocess SET fprocess_name='Check arc state=2 with operative nodes in psector', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-data', addparam=NULL, except_level=3, except_msg='planified arcs without final in some psector.', except_msg_feature=NULL, query_text='SELECT * FROM ( SELECT pa.arc_id, a.arccat_id, pa.psector_id , node_1 as node, a.the_geom FROM plan_psector_x_arc pa JOIN v_edit_arc a USING (arc_id) JOIN plan_psector_x_node pn1 ON pn1.node_id = a.node_1 WHERE pa.psector_id = pn1.psector_id AND pa.state = 1 AND pn1.state = 0 UNION SELECT pa.arc_id, a.arccat_id, pa.psector_id, node_2, a.the_geom FROM plan_psector_x_arc pa JOIN v_edit_arc a USING (arc_id) JOIN plan_psector_x_node pn2 ON pn2.node_id = a.node_2 WHERE pa.psector_id = pn2.psector_id AND pa.state = 1 AND pn2.state = 0) b', info_msg='There are no arcs with state=2 with final nodes obsolete in psector.', function_name='[gw_fct_plan_check_data]' WHERE fid=355;
UPDATE sys_fprocess SET fprocess_name='Planned connecs without reference link', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='planned connecs without reference link planned connecs or gullys without reference link', except_msg_feature=NULL, query_text='SELECT * FROM plan_psector_x_connec WHERE link_id IS NULL ', info_msg='All planned connecs or gullys have a reference link', function_name='[gw_fct_om_check_data]' WHERE fid=356;
UPDATE sys_fprocess SET fprocess_name='Check if defined arcs and arcs exist in a database', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check graph-data', addparam='{"isLooping":"true"}'::json, except_level=2, except_msg='arcs that are configured as toArc for v_prefix_ but is not operative on arc table. Arc_id - '',  string_agg(concat(v_prefix_:,zone_id,-,a.arc_id), nodes that are configured as nodeParent for v_prefix_ but is not operative on node table. Node_id - ,   string_agg(concat(v_prefix_:,zone_id,-,a.node_id::text),, )', except_msg_feature=NULL, query_text='SELECT b.arc_id, b.v_table_id as zone_id FROM ( SELECT v_table_id, json_array_elements_text(((json_array_elements_text((graphconfig::json->>''use'')::json))::json->>''toArc'')::json) as arc_id FROM v_table)b 
WHERE arc_id not in (select arc_id FROM arc WHERE state=1)', info_msg='All arcs defined as nodeParent on v_prefix_ exists on DB.', function_name='[gw_fct_graphanalytics_check_data]' WHERE fid=367;
UPDATE sys_fprocess SET fprocess_name='Null values on to_arc valves', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=3, except_msg='valves with missed values on mandatory column to_arc.', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_inp_valve WHERE to_arc IS NULL', info_msg='Valve to_arc missed values checked. No mandatory values missed.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=368;
UPDATE sys_fprocess SET fprocess_name='Check arc catalog with matcat_id null', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-config', addparam=NULL, except_level=3, except_msg='rows with missed matcat_id on cat_arc table. Fix it before continue''', except_msg_feature=NULL, query_text='SELECT * FROM cat_arc WHERE matcat_id IS NULL', info_msg='No registers found without material on cat_arc table.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=371;
UPDATE sys_fprocess SET fprocess_name='Check operative arcs with wrong topology', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='operative arcs with wrong topology.', except_msg_feature=NULL, query_text='SELECT * FROM temp_t_arc WHERE state = 9', info_msg='All arcs has well-defined topology', function_name='[gw_fct_om_check_data]' WHERE fid=372;
UPDATE sys_fprocess SET fprocess_name='Check undefined nodes as topological nodes', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-topology', addparam=NULL, except_level=2, except_msg='nodes with epa_type UNDEFINED acting as node_1 or node_2 of arcs. Please, check your data before continue.''', except_msg_feature=NULL, query_text='SELECT n.node_id, nodecat_id, the_geom, n.expl_id FROM 
(SELECT node_1 node_id, sector_id FROM v_edit_arc WHERE epa_type !=''UNDEFINED'' UNION 
SELECT node_2, sector_id FROM arc WHERE epa_type !=''UNDEFINED'' )a JOIN  
(SELECT node_id, nodecat_id, the_geom, expl_id FROM v_edit_node WHERE epa_type = ''UNDEFINED'') n USING (node_id) 
JOIN selector_sector USING (sector_id) WHERE n.node_id IS NOT NULL AND cur_user = current_user', info_msg='No nodes with epa_type UNDEFINED acting as node_1 or node_2 of arcs found.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=379;
UPDATE sys_fprocess SET fprocess_name='Arcs shorter than value set as node proximity', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-topology', addparam=NULL, except_level=2, except_msg='arcs with length shorter than value set as node proximity. Please, check your data before continue', except_msg_feature=NULL, query_text='SELECT arc_id,arccat_id,st_length(the_geom), the_geom, expl_id, json_extract_path_text(value::json,''value'')::numeric as nprox 
FROM v_prefix_arc, config_param_system where parameter = ''edit_node_proximity'' 
and  st_length(the_geom) < json_extract_path_text(value::json,''value'')::numeric ', info_msg='No arcs shorter than value set as node proximity.', function_name='[gw_fct_om_check_data]' WHERE fid=391;
UPDATE sys_fprocess SET fprocess_name='Check to_arc missed VALUES for pumps', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=3, except_msg='pumps with missed values on mandatory column to_arc.', except_msg_feature=NULL, query_text='SELECT * FROM v_edit_inp_pump WHERE to_arc IS NULL', info_msg='Pump to_arc missed values checked. No mandatory values missed.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=395;
UPDATE sys_fprocess SET fprocess_name='Builddate before 1900', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='features with built date before 1900.', except_msg_feature=NULL, query_text='SELECT arc_id, ''ARC''::text FROM v_prefix_arc WHERE builtdate < ''1900/01/01''::date UNION 
SELECT  node_id, ''NODE''::text FROM v_prefix_node WHERE builtdate < ''1900/01/01''::date UNION 
SELECT  connec_id, ''CONNEC''::text FROM v_prefix_connec WHERE builtdate < ''1900/01/01''::date', info_msg='No feature with builtdate before 1900.', function_name='[gw_fct_om_check_data]' WHERE fid=406;
UPDATE sys_fprocess SET fprocess_name='Mandatory nodarc over other EPA node', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-topology', addparam=NULL, except_level=3, except_msg='mandatory nodarcs (VALVE & PUMP) over other EPA nodes.'' ', except_msg_feature=NULL, query_text='SELECT a.* FROM (SELECT DISTINCT t1.node_id as n1, t1.nodecat_id as n1cat, t1.state as state1, t2.node_id as n2, 
t2.nodecat_id as n2cat, t2.state as state2, t1.expl_id, 411, 
t1.the_geom, st_distance(t1.the_geom, t2.the_geom) as dist, t1.sector_id  
FROM node AS t1 JOIN node AS t2 ON ST_Dwithin(t1.the_geom, t2.the_geom, 0.01) 
WHERE t1.node_id != t2.node_id AND ((t1.epa_type IN (''PUMP'', ''VALVE'') AND t2.epa_type !=''UNDEFINED'') OR 
(t2.epa_type IN (''PUMP'', ''VALVE'') AND t1.epa_type !=''UNDEFINED''))  ORDER BY t1.node_id) a, selector_expl e, selector_sector s  
WHERE e.expl_id = a.expl_id AND e.cur_user = current_user   AND s.sector_id = a.sector_id 
AND s.cur_user = current_user  AND a.state1 > 0 AND a.state2 > 0 ORDER BY dist', info_msg=' All mandatory nodarc (PUMP & VALVE) are not on the same position than other EPA nodes.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=411;
UPDATE sys_fprocess SET fprocess_name='Shortpipe nodarc over other EPA node', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-topology', addparam=NULL, except_level=2, except_msg='shortpipe nodarcs over other EPA nodes.''', except_msg_feature=NULL, query_text='SELECT * FROM (  SELECT DISTINCT t1.node_id as n1, t1.nodecat_id as n1cat, t1.state as state1, t2.node_id as n2, t2.nodecat_id as n2cat, t2.state as state2, t1.expl_id, 412,   t1.the_geom, st_distance(t1.the_geom, t2.the_geom) as dist, ''''Shortpipe nodarc over other EPA node'''' as descript  FROM selector_expl e, selector_sector s, node AS t1 JOIN node AS t2 ON ST_Dwithin(t1.the_geom, t2.the_geom, 0.01)   WHERE t1.node_id != t2.node_id   AND s.sector_id = t1.sector_id AND s.cur_user = current_user  AND e.expl_id = t1.expl_id AND e.cur_user = current_user   AND ((t1.epa_type = ''''SHORTPIPE'''' AND t2.epa_type =''''JUNCTION'''') OR (t2.epa_type = ''''SHORTPIPE'''' AND t1.epa_type !=''''JUNCTION''''))  AND t1.node_id =''''SHORTPIPE''''  ORDER BY t1.node_id) a where a.state1 > 0 AND a.state2 > 0 ORDER BY dist', info_msg='All shortpipe nodarcs are not on the same position than other EPA nodes.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=412;
UPDATE sys_fprocess SET fprocess_name='Links without connec on startpoint', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-topology', addparam=NULL, except_level=3, except_msg='links related to connecs with wrong topology, startpoint does not fit connec', except_msg_feature=NULL, query_text='SELECT * FROM temp_t_arc WHERE state = 1', info_msg='All connec links has connec on startpoint', function_name='[gw_fct_om_check_data]' WHERE fid=417;
UPDATE sys_fprocess SET fprocess_name='Duplicated hydrometer related to more than one connec', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='hydrometer related to more than one connec. HINT-419: Type ''''SELECT hydrometer_id, count(*) FROM v_rtc_hydrometer  group by hydrometer_id having count(*)> 1''''''', except_msg_feature=NULL, query_text='SELECT hydrometer_id, count(*) FROM v_rtc_hydrometer  group by hydrometer_id having count(*)> 1 ', info_msg='All hydrometeres are related to a unique connec', function_name='[gw_fct_om_check_data]' WHERE fid=419;
UPDATE sys_fprocess SET fprocess_name='Check category_type values exists on man_ table', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='features with category_type does not exists on man_type_category table.', except_msg_feature=NULL, query_text='SELECT ''ARC'', arc_id, category_type FROM v_prefix_arc WHERE category_type NOT IN (SELECT category_type FROM man_type_category WHERE feature_type is null or feature_type = ''ARC'' or featurecat_id IS NOT NULL) AND category_type IS NOT NULL
UNION
SELECT ''NODE'', node_id, category_type FROM v_prefix_node WHERE category_type NOT IN (SELECT category_type FROM man_type_category WHERE feature_type is null or feature_type = ''NODE'' or featurecat_id IS NOT NULL) AND category_type IS NOT NULL
UNION
SELECT ''CONNEC'', connec_id, category_type FROM v_prefix_connec WHERE category_type NOT IN (SELECT category_type FROM man_type_category WHERE feature_type is null or feature_type = ''CONNEC'' or featurecat_id IS NOT NULL) AND category_type IS NOT NULL', info_msg='All features has category_type informed on man_type_category table', function_name='[gw_fct_om_check_data]' WHERE fid=421;
UPDATE sys_fprocess SET fprocess_name='Check function_type values exists on man_ table', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='features with function_type does not exists on man_type_function table.', except_msg_feature=NULL, query_text='SELECT ''ARC'', arc_id, function_type FROM v_prefix_arc WHERE function_type NOT IN (SELECT function_type FROM man_type_function WHERE feature_type is null or feature_type = ''ARC'' or featurecat_id IS NOT NULL) AND function_type IS NOT NULL
UNION
SELECT ''NODE'', node_id, function_type FROM v_prefix_node WHERE function_type NOT IN (SELECT function_type FROM man_type_function WHERE feature_type is null or feature_type = ''NODE'' or featurecat_id IS NOT NULL) AND function_type IS NOT NULL
UNION
SELECT ''CONNEC'', connec_id, function_type FROM v_prefix_connec WHERE function_type NOT IN (SELECT function_type FROM man_type_function WHERE feature_type is null or feature_type = ''CONNEC'' or featurecat_id IS NOT NULL) AND function_type IS NOT NULL', info_msg='All features has function_type informed on man_type_function table', function_name='[gw_fct_om_check_data]' WHERE fid=422;
UPDATE sys_fprocess SET fprocess_name='Check fluid_type values exists on man_ table', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='features with fluid_type does not exists on man_type_fluid table.', except_msg_feature=NULL, query_text='SELECT ''ARC'', arc_id, fluid_type FROM v_prefix_arc WHERE fluid_type NOT IN (SELECT fluid_type FROM man_type_fluid WHERE feature_type is null or feature_type = ''ARC'' or featurecat_id IS NOT NULL) AND fluid_type IS NOT NULL
UNION
SELECT ''NODE'', node_id, fluid_type FROM v_prefix_node WHERE fluid_type NOT IN (SELECT fluid_type FROM man_type_fluid WHERE feature_type is null or feature_type = ''NODE'' or featurecat_id IS NOT NULL) AND fluid_type IS NOT NULL
UNION
SELECT ''CONNEC'', connec_id, fluid_type FROM v_prefix_connec WHERE fluid_type NOT IN (SELECT fluid_type FROM man_type_fluid WHERE feature_type is null or feature_type = ''CONNEC'' or featurecat_id IS NOT NULL) AND fluid_type IS NOT NULL', info_msg='All features has fluid_type informed on man_type_fluid table', function_name='[gw_fct_om_check_data]' WHERE fid=423;
UPDATE sys_fprocess SET fprocess_name='Check location_type values exists on man_ table', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='features with location_type does not exists on man_type_location table.', except_msg_feature=NULL, query_text='SELECT ''ARC'', arc_id, location_type FROM v_prefix_arc WHERE location_type NOT IN (SELECT location_type FROM man_type_location WHERE feature_type is null or feature_type = ''ARC'' or featurecat_id IS NOT NULL) AND location_type IS NOT NULL
UNION
SELECT ''NODE'', node_id, location_type FROM v_prefix_node WHERE location_type NOT IN (SELECT location_type FROM man_type_location WHERE feature_type is null or feature_type = ''NODE'' or featurecat_id IS NOT NULL) AND location_type IS NOT NULL
UNION
SELECT ''CONNEC'', connec_id, location_type FROM v_prefix_connec WHERE location_type NOT IN (SELECT location_type FROM man_type_location WHERE feature_type is null or feature_type = ''CONNEC'' or featurecat_id IS NOT NULL) AND location_type IS NOT NULL', info_msg='All features has location_type informed on man_type_location table', function_name='[gw_fct_om_check_data]' WHERE fid=424;
UPDATE sys_fprocess SET fprocess_name='Check minlength less than 0.01 or more than node proximity', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-topology', addparam=NULL, except_level=3, except_msg='minlength value is bad configured (more than node proximity or less than 0.01).', except_msg_feature=NULL, query_text='WITH subq_1 AS (
SELECT value::numeric as v_minlength FROM config_param_system WHERE parameter = ''epa_arc_minlength''
), subq_2 as (
SELECT (value::json->>''value'')::numeric as v_nodeproximity FROM config_param_system WHERE parameter = ''edit_node_proximity''
), mec as (
select v_minlength < 0.01 or v_minlength >= v_nodeproximity as results from subq_1, subq_2
) select * from mec where results is true', info_msg='Minlength value ('',v_minlength,'') is well configured.''', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=425;
UPDATE sys_fprocess SET fprocess_name='Check expl.geom is not null when raster DEM is enabled', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='exploitations without geometry. Capturing values from DEM is enabled, but it will fail on exploitation: '',string_agg(name,'', '')', except_msg_feature=NULL, query_text='SELECT * FROM exploitation WHERE the_geom IS NULL AND active IS TRUE and expl_id > 0 ', info_msg='Capturing values from DEM is enabled and will work correctly as all exploitations have geometry.', function_name='[gw_fct_om_check_data]' WHERE fid=428;

UPDATE sys_fprocess SET fprocess_name='Check that EPA OBJECTS (curves) name do not contain spaces', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-config', addparam=NULL, except_level=3, except_msg='curves name with spaces. Please fix it!', except_msg_feature=NULL, query_text='SELECT * FROM inp_curve WHERE id like''% %''', info_msg='All curves checked have names without spaces.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=429;
UPDATE sys_fprocess SET fprocess_name='Check matcat null for arcs', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-config', addparam=NULL, except_level=3, except_msg='arcs without matcat_id informed.''', except_msg_feature=NULL, query_text='SELECT * FROM selector_sector s, v_edit_arc a JOIN cat_arc c ON c.id = a.cat_matcat_id  
WHERE a.sector_id = s.sector_id and cur_user=current_user 
AND a.cat_matcat_id IS NULL AND sys_type !=''VARC''', info_msg='All arcs have matcat_id filled.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=430;
UPDATE sys_fprocess SET fprocess_name='Check node ''T candidate'' with wrong topology', project_type='utils', parameters=NULL, "source"='core', isaudit=NULL, fprocess_type='Function process', addparam=NULL, except_level=3, except_msg='Nodes ''''T candidate'''' with wrong topology', except_msg_feature=NULL, query_text='with q_arc as (
select * from arc JOIN v_state_arc USING (arc_id))
SELECT b.* FROM (
	SELECT n1.node_id, n1.nodecat_id, n1.sector_id, n1.expl_id, n1.state, n1.the_geom  FROM q_arc, 
		(select * from node JOIN v_state_node USING (node_id)) n1 
	JOIN (SELECT node_1 node_id from q_arc UNION 
	select node_2 FROM q_arc) b USING (node_id) 
	WHERE st_dwithin(q_arc.the_geom, n1.the_geom,0.01) AND n1.node_id NOT IN 
	(node_1, node_2)
)b, selector_expl e 
where e.expl_id= b.expl_id AND cur_user=current_user', info_msg='All Nodes T has right topology.', function_name='[gw_fct_om_check_data, gw_fct_pg2epa_check_data]' WHERE fid=432;
UPDATE sys_fprocess SET fprocess_name='Arc materials not defined in cat_mat_roughness table', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-config', addparam=NULL, except_level=3, except_msg='arc materials that are not defined in cat_mat_rougnhess table. Please, check your data before continue.''', except_msg_feature=NULL, query_text='SELECT id FROM cat_mat_arc WHERE id NOT IN (SELECT matcat_id FROM cat_mat_roughness)', info_msg='All arc materials are defined on cat_mat_rougnhess table.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=433;
UPDATE sys_fprocess SET fprocess_name='Check estimated depth', project_type='utils', parameters=NULL, "source"='core', isaudit=false, fprocess_type='Function process', addparam=NULL, except_level=2, except_msg='rows without values on cat_arc.estimated_depth column.', except_msg_feature=NULL, query_text='SELECT * FROM cat_arc WHERE estimated_depth IS NOT NULL and active=TRUE', info_msg='There is/are no rows without values on cat_arc.estimated_depth column.', function_name='[gw_fct_plan_check_data]' WHERE fid=437;
UPDATE sys_fprocess SET fprocess_name='Node orphan with isarcdivide=TRUE (OM)', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-topology', addparam=NULL, except_level=2, except_msg='orphan nodes with isarcdivide=TRUE.', except_msg_feature=NULL, query_text='SELECT * FROM v_prefix_node a JOIN cat_node nc ON nodecat_id=id JOIN cat_feature_node nt ON nt.id=nc.nodetype_id WHERE a.state>0 AND isarcdivide = true
	AND (SELECT COUNT(*) FROM arc WHERE node_1 = a.node_id OR node_2 = a.node_id and arc.state>0) = 0', info_msg='There are no orphan nodes with isarcdivide=TRUE', function_name='[gw_fct_om_check_data]' WHERE fid=442;
UPDATE sys_fprocess SET fprocess_name='Node orphan with isarcdivide=FALSE (OM)', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-topology', addparam=NULL, except_level=2, except_msg='orphan nodes with isarcdivide=FALSE.', except_msg_feature=NULL, query_text='SELECT  * FROM node a JOIN cat_node nc ON nodecat_id=id JOIN cat_feature_node nt ON nt.id=nc.nodetype_id WHERE a.state>0 AND isarcdivide=false AND arc_id IS NULL', info_msg='There are no orphan nodes with isarcdivide=FALSE', function_name='[gw_fct_om_check_data]' WHERE fid=443;
UPDATE sys_fprocess SET fprocess_name='Node planified duplicated', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-data', addparam=NULL, except_level=3, except_msg='nodes duplicated with state 2.', except_msg_feature=NULL, query_text='SELECT * FROM (SELECT DISTINCT t1.node_id AS node_1, t1.nodecat_id AS nodecat_1, t1.state as state1, t2.node_id AS node_2, t2.nodecat_id AS nodecat_2, t2.state as state2, t1.expl_id, 453, t1.the_geom FROM v_prefix_node AS t1 JOIN v_prefix_node AS t2 ON ST_Dwithin(t1.the_geom, t2.the_geom, 0.01) WHERE t1.node_id != t2.node_id ORDER BY t1.node_id ) a where a.state1 = 2 AND a.state2 = 2', info_msg='There are no nodes duplicated with state 2', function_name='[gw_fct_plan_check_data, gw_fct_om_check_data]' WHERE fid=453;
UPDATE sys_fprocess SET fprocess_name='Check zones without numeric id', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check graph-data', addparam=NULL, except_level=3, except_msg='presszones with id that is not a numeric value.', except_msg_feature=NULL, query_text='SELECT presszone_id FROM presszone WHERE presszone_id=''-1'' AND presszone_id ~''^\d+(\.\d+)?$'' is false;', info_msg='All presszone_ids are numeric values.', function_name='[gw_fct_graphanalytics_check_data]' WHERE fid=460;
UPDATE sys_fprocess SET fprocess_name='Check number of rows in a plan_price table', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=2, except_msg='rows on plan_price table. Revise the data and remove unnecessary rows.', except_msg_feature=NULL, query_text='with c as (SELECT row_number() over() as rowid, * FROM plan_price) select*from c where rowid > 300', info_msg='The number of rows on plan price is acceptable.', function_name='[gw_fct_plan_check_data]' WHERE fid=465;
UPDATE sys_fprocess SET fprocess_name='Planified EPANET pumps with more than two acs', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-data', addparam=NULL, except_level=3, except_msg='pumpss with more than two arcs .Take a look on temporal table to details', except_msg_feature=NULL, query_text='SELECT * FROM temp_anl_node WHERE fid=467 AND cur_user=current_user;', info_msg='EPA pumps checked. No pumps with more than two arcs detected.', function_name='[gw_fct_plan_check_data]' WHERE fid=467;
UPDATE sys_fprocess SET fprocess_name='Check consistency between cat_manager and config_user_x_expl', project_type='utils', parameters=NULL, "source"='core', isaudit=false, fprocess_type='Function process', addparam=NULL, except_level=3, except_msg='inconsistent configurations on cat_manager and config_user_x_expl for user: '''',string_agg(DISTINCT usern,'''', '''')),''||v_count||'' FROM ''||v_querytext||'';''"', except_msg_feature=NULL, query_text='WITH exploit AS (
SELECT COALESCE(m.rolname, s.rolname) AS usern, id FROM (
SELECT id, unnest(rolename) AS role FROM cat_manager WHERE expl_id IS NOT NULL) q 
LEFT JOIN pg_roles r ON q.role = r.rolname LEFT JOIN pg_auth_members am ON r.oid = am.roleid 
LEFT JOIN pg_roles m ON am.member = m.oid AND m.rolcanlogin = TRUE  LEFT JOIN pg_roles s ON q.role = s.rolname AND s.rolcanlogin = TRUE 
WHERE (m.rolcanlogin IS TRUE OR s.rolcanlogin IS TRUE)
) 
SELECT *, CONCAT(explots, ''-'', usern, ''-'', id) FROM (SELECT id, unnest(expl_id) explots, usern FROM cat_manager   JOIN exploit using(id)) a 
WHERE CONCAT(explots, ''-'', usern, ''-'', id) NOT IN (SELECT CONCAT(expl_id, ''-'', username, ''-'', manager_id) FROM config_user_x_expl cuxe) AND explots != 0', info_msg='Configuration of cat_manager and config_user_x_expl is consistent.', function_name='[gw_fct_admin_check_data]' WHERE fid=472;
UPDATE sys_fprocess SET fprocess_name='Check consistency between cat_manager and config_user_x_sector', project_type='utils', parameters=NULL, "source"='core', isaudit=false, fprocess_type='Function process', addparam=NULL, except_level=3, except_msg='inconsistent configurations on cat_manager and config_user_x_sector for user: '''',string_agg(DISTINCT usern,'''', '''')), ''||v_count||'' FROM ''||v_querytext||'';''"', except_msg_feature=NULL, query_text='WITH sectores AS (SELECT COALESCE(m.rolname, s.rolname) AS usern,  id  FROM (SELECT id, unnest(rolename) AS role FROM cat_manager WHERE sector_id IS NOT NULL) q 
LEFT JOIN pg_roles r ON q.role = r.rolname
LEFT JOIN pg_auth_members am ON r.oid = am.roleid
LEFT JOIN pg_roles m ON am.member = m.oid AND m.rolcanlogin = TRUE
LEFT JOIN pg_roles s ON q.role = s.rolname AND s.rolcanlogin = TRUE
WHERE (m.rolcanlogin IS TRUE OR s.rolcanlogin IS TRUE))
SELECT *, CONCAT(sectors, ''-'', usern, ''-'', id) FROM (SELECT id, unnest(sector_id) sectors, usern FROM cat_manager JOIN sectores using(id)) a 
WHERE CONCAT(sectors, ''-'', usern, ''-'', id) NOT IN (SELECT CONCAT(sector_id, ''-'', username, ''-'', manager_id) FROM config_user_x_sector cuxe) AND sectors NOT IN (0, -1)', info_msg='Configuration of cat_manager and config_user_x_sector is consistent.', function_name='[gw_fct_admin_check_data]' WHERE fid=473;
UPDATE sys_fprocess SET fprocess_name='Check features without defined sector_id', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='connecs with sector_id 0 or -1.', except_msg_feature=NULL, query_text='SELECT connec_id, connecat_id, the_geom, expl_id FROM connec WHERE state > 0 
AND (sector_id=0 OR sector_id=-1)', info_msg='No connecs with 0 or -1 value on sector_id.', function_name='[gw_fct_om_check_data]' WHERE fid=478;
UPDATE sys_fprocess SET fprocess_name='Check duplicated arcs', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='arcs with duplicated geometry.', except_msg_feature=NULL, query_text='SELECT arc_id, arccat_id, state1, arc_id_aux, node_1, node_2, expl_id, the_geom FROM        
 (WITH q_arc AS (SELECT * FROM arc JOIN v_state_arc using (arc_id)) 
 SELECT DISTINCT t1.arc_id, t1.arccat_id, t1.state as state1, t2.arc_id as arc_id_aux,
 t2.state as state2, t1.node_1, t1.node_2, t1.expl_id, t1.the_geom 
 FROM q_arc AS t1 JOIN q_arc AS t2 USING(the_geom) JOIN arc v ON t1.arc_id = v.arc_id
 WHERE t1.arc_id != t2.arc_id ORDER BY t1.arc_id )a
 where a.state1 > 0 AND a.state2 > 0', info_msg='No arcs with duplicated geometry.', function_name='[gw_fct_om_check_data]' WHERE fid=479;
UPDATE sys_fprocess SET fprocess_name='Check connecs with more than 1 link on service', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='connecs with more than 1 link on service', except_msg_feature=NULL, query_text='SELECT connec_id, connecat_id, the_geom, expl_id FROM connec WHERE connec_id IN 
(SELECT feature_id FROM link WHERE state=1 GROUP BY feature_id HAVING count(*) > 1)', info_msg='No connects with more than 1 link on service', function_name='[gw_fct_om_check_data, gw_fct_pg2epa_check_data]' WHERE fid=480;
UPDATE sys_fprocess SET fprocess_name='Check arcs with value of custom length', project_type='utils', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=2, except_msg='percent of arcs have value on custom_length.', except_msg_feature=NULL, query_text='WITH cust_len AS (SELECT count(*) FROM v_edit_arc WHERE custom_length IS NOT NULL), 
		arcs AS (SELECT count(*) FROM v_edit_arc),
		thres as (SELECT json_extract_path_text(value::json,''customLength'',''maxPercent'')::NUMERIC as t FROM config_param_system WHERE parameter = ''epa_outlayer_values'')
		SELECT round(cust_len.count::numeric / arcs.count::numeric *100, 2) FROM arcs, cust_len, thres
		where round(cust_len.count::numeric / arcs.count::numeric *100, 2) > t', info_msg='No arcs have value on custom_length.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=482;
UPDATE sys_fprocess SET fprocess_name='Check connecs related to arcs with diameter bigger than defined value', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='connecs related to arcs with diameter bigger than defined value.', except_msg_feature=NULL, query_text='WITH subq_1 AS (
SELECT (value::json->>''status'')::boolean as status FROM config_param_system WHERE parameter = ''edit_link_check_arcdnom''
), subq_2 as (
select (value::json->>''diameter'')::numeric as v_check_arcdnom FROM config_param_system, subq_1 
WHERE parameter = ''edit_link_check_arcdnom'' and status is true)
SELECT connec_id, connecat_id, the_geom, expl_id 
FROM v_prefix_connec, subq_2 WHERE state>0 AND arc_id IN 
(SELECT arc_id FROM v_prefix_arc JOIN cat_arc ON arccat_id=id WHERE dnom::integer>subq_2.v_check_arcdnom)', info_msg='No connecs related to arcs with diameter bigger than defined value', function_name='[gw_fct_om_check_data]' WHERE fid=488;
UPDATE sys_fprocess SET fprocess_name='Check orphan documents', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Function process', addparam=NULL, except_level=2, except_msg='documents not related to any feature.', except_msg_feature=NULL, query_text='select id from doc where id not in 
(select distinct  doc_id from doc_x_arc UNION 
select distinct  doc_id from doc_x_connec UNION 
select distinct  doc_id from doc_x_node);', info_msg='All documents are related to the features.', function_name='[gw_fct_om_check_data]' WHERE fid=497;
UPDATE sys_fprocess SET fprocess_name='Check orphan visits', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Function process', addparam=NULL, except_level=2, except_msg='visits not related to any feature and without geometry.', except_msg_feature=NULL, query_text='select id from om_visit where the_geom is null and id not in 
(select distinct visit_id from om_visit_x_arc UNION 
select distinct visit_id from om_visit_x_connec UNION 
select distinct visit_id from om_visit_x_node);', info_msg='All visits are related to the features or have geometry.', function_name='[gw_fct_om_check_data]' WHERE fid=498;
UPDATE sys_fprocess SET fprocess_name='Check orphan elements', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Function process', addparam=NULL, except_level=2, except_msg='elements not related to any feature and without geometry.', except_msg_feature=NULL, query_text='select element_id from element where the_geom is null and element_id not in (select distinct element_id from element_x_arc UNION 
select distinct element_id from element_x_connec UNION 
select distinct element_id from element_x_node)', info_msg='All elements are related to the features or have geometry.', function_name='[gw_fct_om_check_data]' WHERE fid=499;
UPDATE sys_fprocess SET fprocess_name='Null values on valve_type of virtualvalve', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check epa-data', addparam=NULL, except_level=1, except_msg='virtualvalves with null values on valv_type column.', except_msg_feature=NULL, query_text='SELECT n.node_id, n.nodecat_id, n.the_geom, expl_id FROM man_valve JOIN v_prefix_node n USING (node_id) 
WHERE n.state = 1 AND (broken IS NULL OR closed IS NULL)', info_msg='Virtualvalve valv_type checked. No mandatory values missed.', function_name='[gw_fct_pg2epa_check_data]' WHERE fid=524;
UPDATE sys_fprocess SET fprocess_name='Features state=2 are involved in psector', project_type='ud', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check plan-config', addparam=NULL, except_level=3, except_msg='planified arcs without psector. planified nodes without psector. planified connecs without psector. planified gullys without psector. features with state=2 without psector assigned. Please, check your data before continue', except_msg_feature=NULL, query_text='SELECT a.feature_id, a.feature , a.catalog, a.the_geom, count(*) FROM (
SELECT node_id as feature_id, ''NODE'' as feature, nodecat_id as catalog, 
the_geom FROM v_edit_node WHERE state=2 AND node_id NOT IN 
(select node_id FROM plan_psector_x_node) UNION  
SELECT arc_id as feature_id, ''ARC'' as feature, arccat_id as catalog, 
the_geom  FROM v_edit_arc WHERE state=2 AND arc_id NOT IN 
(select arc_id FROM plan_psector_x_arc) UNION  
SELECT connec_id as feature_id, ''CONNEC'' as feature, connecat_id  as catalog, the_geom  FROM v_edit_connec WHERE state=2 AND connec_id NOT IN 
(select connec_id FROM plan_psector_x_connec) UNION 
SELECT gully_id as feature_id, ''GULLY'' as feature , gratecat_id as catalog, the_geom 
FROM v_edit_gully WHERE state=2 AND gully_id NOT IN (select gully_id FROM plan_psector_x_gully)) a
GROUP BY a.feature_id, a.feature ,a.catalog, a.the_geom', info_msg='There are no features with state=2 without psector.', function_name='[gw_fct_plan_check_data]' WHERE fid=580;
UPDATE sys_fprocess SET fprocess_name='State not according with state_type', project_type='ud', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='features with state without concordance with state_type. Please, check your data before continue features with state without concordance with state_type. Please, check your data before continue', except_msg_feature=NULL, query_text='SELECT arc_id as id, a.state, state_type FROM v_prefix_arc a 
JOIN value_state_type b ON id=state_type 
WHERE a.state <> b.state UNION 
SELECT node_id as id, a.state, state_type FROM v_prefix_node a 
JOIN value_state_type b ON id=state_type WHERE a.state <> b.state UNION 
SELECT connec_id as id, a.state, state_type FROM v_prefix_connec a 
JOIN value_state_type b ON id=state_type WHERE a.state <> b.state UNION 
SELECT gully_id as id, a.state, state_type FROM v_prefix_gully a 
JOIN value_state_type b ON id=state_type WHERE a.state <> b.state UNION 
SELECT element_id as id, a.state, state_type FROM v_prefix_element a 
JOIN value_state_type b ON id=state_type WHERE a.state <> b.state', info_msg='No features without concordance against state and state_type.   No features without concordance against state and state_type.', function_name='[gw_fct_om_check_data]' WHERE fid=582;
UPDATE sys_fprocess SET fprocess_name='Features with code null', project_type='ud', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='features with code with NULL values. Please, check your data before continue with code with NULL values. Please, check your data before continue', except_msg_feature=NULL, query_text='SELECT arc_id, arccat_id, the_geom FROM v_prefix_arc WHERE code IS NULL UNION 
SELECT node_id, nodecat_id, the_geom FROM v_prefix_node WHERE code IS NULL UNION 
SELECT connec_id, connecat_id, the_geom FROM v_prefix_connec WHERE code IS NULL UNION 
SELECT gully_id, gratecat_id, the_geom FROM v_prefix_gully WHERE code IS NULL UNION 
SELECT element_id, elementcat_id, the_geom FROM v_prefix_element WHERE code IS NULL', info_msg='No features (arc, node, connec, gully, element) with NULL values on code found. No features (arc, node, connec, element) with NULL values on code found.', function_name='[gw_fct_om_check_data]' WHERE fid=584;
UPDATE sys_fprocess SET fprocess_name='Features state=1 and end date', project_type='ud', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='features on service with value of end date.', except_msg_feature=NULL, query_text='SELECT arc_id as feature_id from v_prefix_arc where state = 1 and enddate is not null UNION 
SELECT node_id from v_prefix_node where state = 1 and enddate is not null UNION 
SELECT connec_id from v_prefix_connec where state = 1 and enddate is not null UNION 
SELECT gully_id from v_prefix_gully where state = 1 and enddate is not null', info_msg='No features on service have value of end date', function_name='[gw_fct_om_check_data]' WHERE fid=586;
UPDATE sys_fprocess SET fprocess_name='Features state=0 without end date', project_type='ud', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='features with state 0 without value of end date.', except_msg_feature=NULL, query_text='SELECT arc_id as feature_id from v_prefix_arc where state = 0 and enddate is null UNION 
SELECT node_id from v_prefix_node where state = 0 and enddate is null UNION 
SELECT connec_id from v_prefix_connec where state = 0 and enddate is null UNION 
SELECT gully_id from v_prefix_gully where state = 0 and enddate is null', info_msg='No features with state 0 are missing the end date', function_name='[gw_fct_om_check_data]' WHERE fid=588;
UPDATE sys_fprocess SET fprocess_name='Features state=1 and end date before start date', project_type='ud', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=2, except_msg='features with end date earlier than built date.', except_msg_feature=NULL, query_text='SELECT arc_id as feature_id from v_prefix_arc where enddate < builtdate and state = 1 UNION 
SELECT node_id from v_prefix_node where enddate < builtdate and state = 1 UNION 
SELECT connec_id from v_prefix_connec where enddate < builtdate and state = 1 UNION 
SELECT gully_id from v_prefix_gully where enddate < builtdate and state = 1', info_msg='No features with end date earlier than built date', function_name='[gw_fct_om_check_data]' WHERE fid=590;
UPDATE sys_fprocess SET fprocess_name='Duplicated ID between arc, node, connec, gully', project_type='ud', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-data', addparam=NULL, except_level=3, except_msg='features with duplicated ID value between arc, node, connec, gully features with duplicated ID values between arc, node, connec, gully', except_msg_feature=NULL, query_text='SELECT node_id AS feature_id FROM v_prefix_node n JOIN v_prefix_arc a ON a.arc_id=n.node_id UNION 
SELECT node_id FROM v_prefix_node n JOIN v_prefix_connec c ON c.connec_id=n.node_id UNION 
SELECT node_id FROM v_prefix_node n JOIN v_prefix_gully g ON g.gully_id=n.node_id UNION 
SELECT connec_id FROM v_prefix_connec c JOIN v_prefix_gully g ON g.gully_id=c.connec_id UNION 
SELECT a.arc_id FROM v_prefix_arc a JOIN v_prefix_connec c ON c.connec_id=a.arc_id UNION 
SELECT a.arc_id FROM v_prefix_arc a JOIN v_prefix_gully g ON g.gully_id=a.arc_id', info_msg='All features have a diferent ID to be correctly identified', function_name='[gw_fct_om_check_data]' WHERE fid=592;
UPDATE sys_fprocess SET fprocess_name='Check if defined nodes and arcs exist in a database', project_type='ws', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check graph-data', addparam='{"isLooping":"true"}'::json, except_level=2, except_msg='nodes that are configured as nodeParent for v_prefix_ but is not operative on node table. Node_id - ,   string_agg(concat(v_prefix_:,zone_id,-,a.node_id::text),, )', except_msg_feature=NULL, query_text='SELECT b.node_id, b.v_table_id as zone_id FROM (
SELECT v_table_id, (graphconfig->''use''->0->>''nodeParent'')::text as node_id FROM v_table)b 
WHERE node_id::text not in (select node_id FROM node WHERE state=1)', info_msg='All nodes defined as nodeParent on v_prefix_ exists on DB.', function_name='[gw_fct_graphanalytics_check_data]' WHERE fid=594;
UPDATE sys_fprocess SET fprocess_name='Node orphan with isarcdivide=TRUE (OM)', project_type='ud', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-topology', addparam=NULL, except_level=2, except_msg='orphan nodes with isarcdivide=TRUE.', except_msg_feature=NULL, query_text='SELECT * FROM v_prefix_node a JOIN cat_feature_node ON id = a.node_type WHERE a.state>0 AND isarcdivide = true 
AND (SELECT COUNT(*) FROM arc WHERE node_1 = a.node_id OR node_2 = a.node_id and arc.state>0) = 0', info_msg='There are no orphan nodes with isarcdivide=TRUE', function_name='[gw_fct_om_check_data]' WHERE fid=596;
UPDATE sys_fprocess SET fprocess_name='Node orphan with isarcdivide=FALSE (OM)', project_type='ud', parameters=NULL, "source"='core', isaudit=true, fprocess_type='Check om-topology', addparam=NULL, except_level=2, except_msg='orphan nodes with isarcdivide=FALSE.', except_msg_feature=NULL, query_text='SELECT  * FROM node a JOIN cat_feature_node ON id = a.node_type WHERE a.state>0 AND isarcdivide=false', info_msg='There are no orphan nodes with isarcdivide=FALSE', function_name='[gw_fct_om_check_data]' WHERE fid=598;