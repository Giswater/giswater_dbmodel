/*
This file is part of Giswater 3
The program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
This version of Giswater is provided by Giswater Association
*/


SET search_path = SCHEMA_NAME, public, pg_catalog;

-- 2024/11/11
CREATE OR REPLACE VIEW v_edit_node AS 
 SELECT a.node_id,
    a.code,
    a.elevation,
    a.depth,
    a.node_type,
    a.sys_type,
    a.nodecat_id,
    a.cat_matcat_id,
    a.cat_pnom,
    a.cat_dnom,
    a.cat_dint,
    a.epa_type,
    a.state,
    a.state_type,
    a.expl_id,
    a.macroexpl_id,
    a.sector_id,
    a.sector_name,
    a.macrosector_id,
    a.sector_type,
    a.presszone_id,
    a.preszone_name,
    a.presszone_type,
    a.presszone_head,
    a.dma_id,
    a.dma_name,
    a.dma_type,
    a.macrodma_id,
    a.dqa_id,
    a.dqa_name,
    a.dqa_type,
    a.macrodqa_id,
    a.arc_id,
    a.parent_id,
    a.annotation,
    a.observ,
    a.comment,
    a.staticpressure,
    a.soilcat_id,
    a.function_type,
    a.category_type,
    a.fluid_type,
    a.location_type,
    a.workcat_id,
    a.workcat_id_end,
    a.workcat_id_plan,
    a.builtdate,
    a.enddate,
    a.buildercat_id,
    a.ownercat_id,
    a.muni_id,
    a.postcode,
    a.district_id,
    a.streetname,
    a.postnumber,
    a.postcomplement,
    a.streetname2,
    a.postnumber2,
    a.postcomplement2,
    a.region_id,
    a.province_id,
    a.descript,
    a.svg,
    a.rotation,
    a.link,
    a.verified,
    a.undelete,
    a.label,
    a.label_x,
    a.label_y,
    a.label_rotation,
    a.label_quadrant,
    a.publish,
    a.inventory,
    a.hemisphere,
    a.num_value,
    a.adate,
    a.adescript,
    a.accessibility,
    a.dma_style,
    a.presszone_style,
    a.asset_id,
    a.om_state,
    a.conserv_state,
    a.access_type,
    a.placement_type,
    a.expl_id2,
    a.is_operative,
    a.brand_id,
    a.model_id,
    a.serial_number,
    a.minsector_id,
    a.macrominsector_id,
    a.demand_max,
    a.demand_min,
    a.demand_avg,
    a.press_max,
    a.press_min,
    a.press_avg,
    a.head_max,
    a.head_min,
    a.head_avg,
    a.quality_max,
    a.quality_min,
    a.quality_avg,
    a.tstamp,
    a.insert_user,
    a.lastupdate,
    a.lastupdate_user,
    a.the_geom,
        CASE
            WHEN s.sector_id > 0 AND a.is_operative = true AND a.epa_type::text <> 'UNDEFINED'::character varying(16)::text THEN a.epa_type
            ELSE NULL::character varying(16)
        END AS inp_type,
    v.closed AS closed_valve,
    v.broken AS broken_valve
   FROM ( SELECT n.node_id,
            n.code,
            n.elevation,
            n.depth,
            n.node_type,
            n.sys_type,
            n.nodecat_id,
            n.cat_matcat_id,
            n.cat_pnom,
            n.cat_dnom,
            n.cat_dint,
            n.epa_type,
            n.state,
            n.state_type,
            n.expl_id,
            n.macroexpl_id,
            n.sector_id,
            n.sector_name,
            n.macrosector_id,
            n.sector_type,
            n.presszone_id,
            n.preszone_name,
            n.presszone_type,
            n.presszone_head,
            n.dma_id,
            n.dma_name,
            n.dma_type,
            n.macrodma_id,
            n.dqa_id,
            n.dqa_name,
            n.dqa_type,
            n.macrodqa_id,
            n.arc_id,
            n.parent_id,
            n.annotation,
            n.observ,
            n.comment,
            n.staticpressure,
            n.soilcat_id,
            n.function_type,
            n.category_type,
            n.fluid_type,
            n.location_type,
            n.workcat_id,
            n.workcat_id_end,
            n.workcat_id_plan,
            n.builtdate,
            n.enddate,
            n.buildercat_id,
            n.ownercat_id,
            n.muni_id,
            n.postcode,
            n.district_id,
            n.streetname,
            n.postnumber,
            n.postcomplement,
            n.streetname2,
            n.postnumber2,
            n.postcomplement2,
            n.region_id,
            n.province_id,
            n.descript,
            n.svg,
            n.rotation,
            n.link,
            n.verified,
            n.undelete,
            n.label,
            n.label_x,
            n.label_y,
            n.label_rotation,
            n.label_quadrant,
            n.publish,
            n.inventory,
            n.hemisphere,
            n.num_value,
            n.adate,
            n.adescript,
            n.accessibility,
            n.dma_style,
            n.presszone_style,
            n.asset_id,
            n.om_state,
            n.conserv_state,
            n.access_type,
            n.placement_type,
            n.expl_id2,
            n.is_operative,
            n.brand_id,
            n.model_id,
            n.serial_number,
            n.minsector_id,
            n.macrominsector_id,
            n.demand_max,
            n.demand_min,
            n.demand_avg,
            n.press_max,
            n.press_min,
            n.press_avg,
            n.head_max,
            n.head_min,
            n.head_avg,
            n.quality_max,
            n.quality_min,
            n.quality_avg,
            n.tstamp,
            n.insert_user,
            n.lastupdate,
            n.lastupdate_user,
            n.the_geom
           FROM ( SELECT selector_expl.expl_id
                   FROM selector_expl
                  WHERE selector_expl.cur_user = CURRENT_USER::text) s_1,
            vu_node n
             JOIN v_state_node USING (node_id)
          WHERE n.expl_id = s_1.expl_id OR n.expl_id2 = s_1.expl_id) a
     LEFT JOIN man_valve v USING (node_id)
     JOIN selector_sector s USING (sector_id)
     LEFT JOIN selector_municipality m USING (muni_id)
  WHERE s.cur_user = CURRENT_USER AND (m.cur_user = CURRENT_USER OR a.muni_id IS NULL);

 
DROP VIEW IF EXISTS v_sector_node;
  

CREATE OR REPLACE VIEW v_ui_dma
AS SELECT d.dma_id,
    d.name,
    d.descript,
    d.expl_id,
    md.name AS macrodma,
    d.active,
    d.undelete,
    d.minc,
    d.maxc,
    d.effc,
    d.avg_press,
    d.pattern_id,
    d.link,
    d.graphconfig,
    d.stylesheet,
    d.tstamp,
    d.insert_user,
    d.lastupdate,
    d.lastupdate_user
   FROM selector_expl s, dma d
   	   LEFT JOIN macrodma md ON md.macrodma_id = d.macrodma_id
  WHERE d.dma_id > 0 
  and s.expl_id = d.expl_id and s.cur_user = current_user
  ORDER BY d.dma_id;
  
 
 CREATE OR REPLACE VIEW v_ui_sector
AS SELECT s.sector_id,
    s.name,
    ms.name AS macrosector,
    s.descript,
    s.undelete,
    s.sector_type,
    s.active,
    s.parent_id,
    s.pattern_id,
    s.tstamp,
    s.insert_user,
    s.lastupdate,
    s.lastupdate_user,
    s.graphconfig,
    s.stylesheet
   FROM selector_sector ss, sector s
     LEFT JOIN macrosector ms ON ms.macrosector_id = s.macrosector_id
  WHERE s.sector_id > 0
  and ss.sector_id = s.sector_id and ss.cur_user = current_user
  ORDER BY s.sector_id;
  
 
 CREATE OR REPLACE VIEW v_ui_presszone
AS SELECT presszone_id,
    name,
    descript,
    p.expl_id,
    link,
    head,
    active,
    graphconfig,
    stylesheet,
    tstamp,
    insert_user,
    lastupdate,
    lastupdate_user
   FROM selector_expl s, presszone p
  WHERE presszone_id::text <> ALL (ARRAY['0'::character varying, '-1'::character varying]::text[])
  and s.expl_id = p.expl_id and s.cur_user = current_user
  ORDER BY presszone_id;
  
 
CREATE OR REPLACE VIEW v_ui_dqa
AS SELECT d.dqa_id,
    d.name,
    d.descript,
    d.expl_id,
    md.name AS macrodma,
    d.active,
    d.undelete,
    d.the_geom,
    d.pattern_id,
    d.dqa_type,
    d.link,
    d.graphconfig,
    d.stylesheet,
    d.tstamp,
    d.insert_user,
    d.lastupdate,
    d.lastupdate_user
   FROM selector_expl s, dqa d
     LEFT JOIN macrodqa md ON md.macrodqa_id = d.macrodqa_id
  WHERE d.dqa_id > 0
  and s.expl_id = d.expl_id and s.cur_user = current_user
  ORDER BY d.dqa_id;
